:macro pointer ADDRESS {
  :byte { ADDRESS >> 8 }
  :byte { ADDRESS }
}

:macro unpack-long ADDR {
  :calc hi { 0xFF & ADDR >> 8 }
  :calc lo { 0xFF & ADDR }
  v0 := hi
  v1 := lo
}

:alias viper-delay vE

:org 0xB70


: hall-0+0+1
  0x8c 0xf 0x83 0xe0 0xe0 0x44 0x6 0x83 0xf0 0xf0 0xf3 0x73 0x3 0x8c 0xe0 0xe6 0xe7 0xe7 0xe6 0xc0 0x83 0x7b 0xf3 0xf0 0xe0 0xc3 0x86 0x86 0x24 0xe0 0xe0 0x80 0x0 0x3 0xff 0x8b 0x3f 0xf 0x43 0x40 0x68 0xa 0x20 0x20 0xb4 0x14 0x40 0x8b 0x6a 0x6a 0x40 0x14 0xb4 0x20 0x20 0x2 0x68 0x40 0x40 0x5 0x0
  
: hall-0+16+1
  0x7 0xff 0x8c 0x3f 0x2 0x40 0x68 0x0 0xb0 0x20 0x9 0x42 0x12 0xa0 0x0 0x82 0x68 0x40 0x9 0x0 0x9 0xff 0x89 0x77 0xa 0x0 0x80 0x0 0x0 0x40 0x0 0x80 0xc 0x0
  
: hall-0+32+1
  0x9 0xff 0x89 0xee 0xb0 0x0 0x1 0x0 0x0 0x2 0x0 0x1 0xc 0x0 0x7 0xff 0x8c 0xfc 0x40 0x2 0x16 0x0 0xd 0x4 0x90 0x42 0x48 0x5 0x0 0x82 0x16 0x2 0x9 0x0
  
: hall-0+48+1
  0x3 0xff 0x8b 0xfc 0xf0 0xc2 0x2 0x16 0x50 0x4 0x4 0x2d 0x28 0x2 0x8b 0x56 0x56 0x2 0x28 0x2d 0x4 0x4 0x40 0x16 0x2 0x2 0x5 0x0 0x8c 0xf0 0xc1 0x7 0x7 0x22 0x60 0xc1 0xf 0xf 0xcf 0xce 0xc0 0x8c 0x7 0x67 0xe7 0xe7 0x67 0x3 0xc1 0xde 0xcf 0xf 0x7 0xc3 0x86 0x61 0x24 0x7 0x7 0x1 0x0
  

: hall-1+0+1
  0x8c 0xff 0x3 0x0 0xe0 0xf4 0xe6 0x3 0x20 0xf8 0xf3 0xfb 0xfb 0x8c 0x0 0xf6 0xf7 0xf7 0xe6 0x80 0x3 0xeb 0xfb 0xf0 0x20 0x3 0x83 0xd6 0xf4 0xd0 0x3 0x0 0x3 0xff 0x8b 0x3f 0xf 0x43 0x40 0x68 0xa 0x20 0x20 0xb4 0x14 0x40 0x8b 0x6a 0x6a 0x40 0x14 0xb4 0x20 0x20 0x2 0x68 0x40 0x40 0x5 0x0
  
  
: hall-1+48+1
  0x3 0xff 0x8b 0xfc 0xf0 0xc2 0x2 0x16 0x50 0x4 0x4 0x2d 0x28 0x2 0x8b 0x56 0x56 0x2 0x28 0x2d 0x4 0x4 0x40 0x16 0x2 0x2 0x5 0x0 0x8c 0xff 0xc0 0x0 0x7 0x2f 0x67 0xc0 0x4 0x1f 0xcf 0xdf 0xdf 0x8c 0x0 0x6f 0xef 0xef 0x67 0x1 0xc0 0xd7 0xdf 0xf 0x4 0xc0 0x83 0x6b 0x2f 0xb 0x3 0x0
  

: hall-2+0+1
  0x8c 0xf 0x87 0xe7 0xe7 0x47 0x7 0x80 0xf2 0xf1 0xf0 0x71 0x7 0x8c 0xe1 0xe0 0xe7 0xe3 0xe0 0xc0 0x86 0x7a 0xf0 0xf2 0xe1 0xc0 0x86 0x80 0x20 0xe0 0xe0 0x80 0x0 0x6 0xff 0x8c 0x0 0x94 0xcc 0x0 0x98 0x9e 0xbc 0x0 0xc 0xdc 0xc6 0x0 0x85 0xd2 0x64 0x0 0xbc 0xe 0x7 0x0
  
  
: hall-2+48+1
  0x6 0xff 0x8c 0x0 0x29 0x33 0x0 0x19 0x79 0x3d 0x0 0x30 0x3b 0x63 0x0 0x85 0x4b 0x26 0x0 0x3d 0x70 0x7 0x0 0x8c 0xf0 0xe1 0xe7 0xe7 0xe2 0xe0 0x1 0x4f 0x8f 0xf 0x8e 0xe0 0x8c 0x87 0x7 0xe7 0xc7 0x7 0x3 0x61 0x5e 0xf 0x4f 0x87 0x3 0x86 0x1 0x4 0x7 0x7 0x1 0x0
  
  
: hall-3+16+1
  0x7 0xff 0x8c 0x7f 0x55 0x0 0x2c 0x50 0x0 0x64 0x15 0x0 0x28 0x94 0x40 0x81 0x20 0xa 0x0 0x9 0xff 0x89 0x77 0xa 0x0 0x80 0x0 0x0 0x40 0x0 0x80 0xc 0x0
  
: hall-3+32+1
  0x9 0xff 0x89 0xee 0xb0 0x0 0x1 0x0 0x0 0x2 0x0 0x1 0xc 0x0 0x7 0xff 0x8c 0xfe 0x94 0x0 0x34 0xa 0x0 0x26 0xa8 0x0 0x14 0x29 0x2 0x81 0x4 0xa 0x0
  
  
: hall-3-5+16+1
  0x7 0xff 0x8c 0x7f 0x55 0x0 0x2c 0x50 0x0 0x64 0x15 0x0 0x28 0x94 0x40 0x81 0x20 0xa 0x0 0x9 0xff 0x84 0x77 0xa 0x0 0x80 0x4 0x0 0x81 0x80 0xc 0x0
  
: hall-3-5+32+1
  0x9 0xff 0x84 0xee 0xb0 0x0 0x1 0x4 0x0 0x81 0x1 0xc 0x0 0x7 0xff 0x8c 0xfe 0x94 0x0 0x34 0xa 0x0 0x26 0xa8 0x0 0x14 0x29 0x2 0x81 0x4 0xa 0x0
  
  
: hall-3-6+16+1
  0x7 0xff 0x8c 0x7f 0x55 0x0 0x2c 0x50 0x0 0x64 0x15 0x0 0x28 0x94 0x40 0x81 0x20 0xa 0x0 0x9 0xff 0x89 0x77 0xa 0x0 0x80 0x0 0x0 0x40 0x0 0x80 0xc 0x0
  
: hall-3-6+32+1
  0x9 0xff 0x89 0xee 0xb0 0x0 0x1 0x0 0x0 0x2 0x0 0x1 0xc 0x0 0x7 0xff 0x8c 0xfe 0x94 0x0 0x34 0xa 0x0 0x26 0xa8 0x0 0x14 0x29 0x2 0x81 0x4 0xa 0x0
  
  
: hall-4+16+1
  0x7 0xff 0x8c 0x3f 0x2 0x40 0x68 0x0 0xb0 0x20 0x9 0x40 0x10 0xa0 0x0 0x82 0x68 0x40 0x9 0x0 0x9 0xff 0x82 0x77 0xa 0x4 0x0 0x81 0x80 0xc 0x0 0x2 0x0
  
: hall-4+32+1
  0x9 0xff 0x82 0xee 0xb0 0x5 0x0 0x81 0x1 0xc 0x0 0x1 0x0 0x7 0xff 0x8c 0xfc 0x40 0x2 0x16 0x0 0xd 0x84 0x10 0x2 0x8 0x5 0x0 0x82 0x16 0x2 0x9 0x0
  
  
: hall-4-6+16+1
  0x7 0xff 0x8c 0x3f 0x2 0x40 0x68 0x0 0xb0 0x20 0x8 0x40 0x11 0xa0 0x0 0x82 0x68 0x40 0x9 0x0 0x9 0xff 0x87 0x77 0xa 0x0 0x0 0x80 0x0 0x80 0xc 0x0 0x2 0x0
  
: hall-4-6+32+1
  0x9 0xff 0x82 0xee 0xb0 0x3 0x0 0x81 0x1 0xc 0x0 0x3 0x0 0x7 0xff 0x8c 0xfc 0x40 0x2 0x16 0x0 0xd 0x84 0x10 0x2 0x8 0x5 0x0 0x82 0x16 0x2 0x9 0x0
  
  
: hall-5+16+1
  0x7 0xff 0x8c 0x3f 0x2 0x40 0x68 0x0 0xb0 0x20 0x9 0x42 0x12 0xa0 0x0 0x82 0x68 0x40 0x9 0x0 0x9 0xff 0x84 0x77 0xa 0x0 0x80 0x4 0x0 0x81 0x80 0xc 0x0
  
: hall-5+32+1
  0x9 0xff 0x84 0xee 0xb0 0x0 0x1 0x4 0x0 0x81 0x1 0xc 0x0 0x7 0xff 0x8c 0xfc 0x40 0x2 0x16 0x0 0xd 0x4 0x90 0x42 0x48 0x5 0x0 0x82 0x16 0x2 0x9 0x0
  
  
: hall-6+16+1
  0x7 0xff 0x8c 0x3f 0x2 0x40 0x68 0x0 0xb0 0x20 0x9 0x42 0x12 0xa0 0x0 0x82 0x68 0x40 0x9 0x0 0x9 0xff 0x89 0x77 0xa 0x0 0x80 0x0 0x0 0x40 0x0 0x80 0xc 0x0
  
: hall-6+32+1
  0x9 0xff 0x89 0xee 0xb0 0x0 0x1 0x0 0x0 0x2 0x0 0x1 0xc 0x0 0x7 0xff 0x8c 0xfc 0x40 0x2 0x16 0x0 0xd 0x4 0x90 0x42 0x48 0x5 0x0 0x82 0x16 0x2 0x9 0x0
  

: wall-1+0+1
  0x8c 0xf 0x80 0xe3 0xe7 0x47 0x7 0x80 0xf1 0xf3 0xf3 0x73 0x2 0x8c 0xe0 0xe7 0xe5 0xe3 0xe3 0xc1 0x80 0x7b 0xf3 0xf1 0xe0 0xc0 0x89 0x87 0x23 0xe3 0xe1 0x80 0x0 0xff 0x0 0xe7 0x3 0xef 0x8c 0x0 0xf1 0xf3 0xf7 0xf3 0xf7 0x0 0xf3 0xf7 0xf3 0xf7 0xf3 0x8c 0x0 0xfb 0xfb 0xf9 0xf0 0x0 0xef 0xe7 0xa7 0xc3 0x0 0x0
  
: wall-1+16+1
  0x83 0xff 0x0 0x8f 0x3 0xbf 0x82 0x0 0x65 0x4 0xef 0x81 0x0 0x4 0xf7 0x82 0xf3 0x0 0x3 0xfb 0x8b 0xf8 0x0 0xef 0xe7 0xe7 0x83 0x0 0x0 0xff 0x0 0x93 0x3 0xbf 0x81 0x0 0x5 0xfb 0x81 0x0 0x5 0xf7 0x82 0x0 0xf3 0x3 0xfb 0x81 0x0 0x3 0xf7 0x83 0xc7 0x0 0x0
  
: wall-1+32+1
  0x83 0xff 0x0 0xda 0x3 0xdf 0x82 0x0 0xf9 0x4 0xfd 0x81 0x0 0x4 0xf7 0x82 0xe7 0x0 0x3 0xfd 0x82 0xf9 0x0 0x3 0xfb 0x8b 0xe3 0x0 0x0 0xff 0x0 0x71 0x79 0x7d 0x7d 0x0 0xe3 0x4 0xfb 0x81 0x0 0x4 0xf7 0x82 0xe7 0x0 0x3 0xfb 0x82 0xf3 0x0 0x3 0xf7 0x83 0xc5 0x0 0x0
  
: wall-1+48+1
  0x89 0xff 0x0 0xc2 0xf3 0xfb 0xea 0x0 0xc6 0xe7 0x3 0xf7 0x8c 0x0 0xf9 0xfb 0xf3 0xf3 0xe3 0x0 0xeb 0xef 0xef 0x8e 0x0 0x8c 0xf5 0xf7 0xe7 0x85 0x0 0x0 0xf0 0x1 0x7 0xc7 0xc2 0xe0 0x87 0x1 0x8f 0x8f 0xcf 0x8e 0x40 0x7 0x3 0xe7 0x8c 0xc7 0x3 0x1 0xde 0xcf 0x8f 0x7 0x3 0xa1 0xe4 0xc7 0x7 0x82 0x1 0x0
  

: wall-1-1+0+1
  0x8c 0xff 0x0 0x3 0xe7 0xf7 0xe7 0x0 0x21 0xfb 0xf3 0xfb 0xfa 0x8c 0x0 0xf7 0xf5 0xf3 0xe3 0x81 0x0 0xeb 0xfb 0xf1 0x20 0x0 0x89 0xd7 0xf3 0xd3 0x1 0x0 0x0 0xff 0x0 0xe7 0x3 0xef 0x8c 0x0 0xf1 0xf3 0xf7 0xf3 0xf7 0x0 0xf3 0xf7 0xf3 0xf7 0xf3 0x8c 0x0 0xfb 0xfb 0xf9 0xf0 0x0 0xef 0xe7 0xa7 0xc3 0x0 0x0
  
  
: wall-1-1+48+1
  0x89 0xff 0x0 0xc2 0xf3 0xfb 0xea 0x0 0xc6 0xe7 0x3 0xf7 0x8c 0x0 0xf9 0xfb 0xf3 0xf3 0xe3 0x0 0xeb 0xef 0xef 0x8e 0x0 0x8c 0xf5 0xf7 0xe7 0x85 0x0 0x0 0xff 0x0 0x0 0xc7 0xcf 0xe7 0x87 0x0 0x84 0x9f 0xcf 0x9f 0x5f 0x0 0x3 0xef 0x8b 0xc7 0x1 0x0 0xd7 0xdf 0x8f 0x4 0x0 0xab 0xef 0xcb 0x3 0x0
  

: wall-1-2+0+1
  0x8c 0xff 0xf0 0xf3 0x77 0xd7 0xb7 0x0 0xb1 0x13 0x3 0x7b 0x72 0x8c 0x10 0x7 0xf5 0x73 0x13 0x1 0xb0 0x93 0x3 0x79 0x10 0x0 0x89 0x7 0x3 0x3 0x1 0x0 0x0 0xff 0x0 0xe7 0x3 0xef 0x8c 0x0 0xf1 0xf3 0xf7 0xf3 0xf7 0x0 0xf3 0xf7 0xf3 0xf7 0xf3 0x8c 0x0 0xfb 0xfb 0xf9 0xf0 0x0 0xef 0xe7 0xa7 0xc3 0x0 0x0
  
  
: wall-1-2+48+1
  0x89 0xff 0x0 0xc2 0xf3 0xfb 0xea 0x0 0xc6 0xe7 0x3 0xf7 0x8c 0x0 0xf9 0xfb 0xf3 0xf3 0xe3 0x0 0xeb 0xef 0xef 0x8e 0x0 0x8c 0xf5 0xf7 0xe7 0x85 0x0 0x0 0xff 0xf 0xf 0xce 0xcb 0xed 0x8c 0x0 0x8d 0x88 0xc0 0x9e 0x4e 0x8 0xe0 0xef 0xee 0xc8 0x0 0x89 0xd 0xc9 0xc0 0x9e 0x8 0x0 0xa0 0xe0 0xc0 0x3 0x0
  

: wall-1-3+0+1
  0x8c 0xff 0xf8 0xf3 0x77 0xd7 0xb7 0xd0 0x69 0x23 0x3 0xb3 0x4a 0x8c 0x0 0x27 0xb5 0x3 0x53 0x1 0xc0 0xb 0x3 0x1 0x0 0x0 0x89 0x7 0x3 0x3 0x1 0x0 0x0 0xff 0x0 0xe7 0x3 0xef 0x8c 0x0 0xf1 0xf3 0xf7 0xf3 0xf7 0x0 0xf3 0xf7 0xf3 0xf7 0xf3 0x8c 0x0 0xfb 0xfb 0xf9 0xf0 0x0 0xef 0xe7 0xa7 0xc3 0x0 0x0
  
  
: wall-1-3+48+1
  0x89 0xff 0x0 0xc2 0xf3 0xfb 0xea 0x0 0xc6 0xe7 0x3 0xf7 0x8c 0x0 0xf9 0xfb 0xf3 0xf3 0xe3 0x0 0xeb 0xef 0xef 0x8e 0x0 0x8c 0xf5 0xf7 0xe7 0x85 0x0 0x0 0xff 0x1f 0xf 0xce 0xcb 0xed 0x8c 0xb 0x96 0x84 0xc0 0x8d 0x52 0x0 0xe4 0xed 0xe0 0xca 0x0 0x89 0x3 0xd0 0xc0 0x80 0x0 0x0 0xa0 0xe0 0xc0 0x3 0x0
  

: wall-1-4+0+1
  0x8c 0xff 0xf8 0xf3 0x77 0xd7 0xb7 0xd0 0x69 0x23 0x3 0x3 0x2 0x8c 0x0 0x27 0x5 0x13 0x3 0x41 0x0 0x3 0x3 0x1 0x0 0x0 0x89 0x7 0x3 0x3 0x1 0x0 0x0 0xff 0x0 0xe7 0x3 0xef 0x8c 0x0 0xf1 0xf3 0xf7 0xf3 0xf7 0x0 0xf3 0xf7 0xf3 0xf7 0xf3 0x8c 0x0 0xfb 0xfb 0xf9 0xf0 0x0 0xef 0xe7 0xa7 0xc3 0x0 0x0
  
  
: wall-1-4+48+1
  0x89 0xff 0x0 0xc2 0xf3 0xfb 0xea 0x0 0xc6 0xe7 0x3 0xf7 0x8c 0x0 0xf9 0xfb 0xf3 0xf3 0xe3 0x0 0xeb 0xef 0xef 0x8e 0x0 0x8c 0xf5 0xf7 0xe7 0x85 0x0 0x0 0xff 0x1f 0xf 0xce 0xcb 0xed 0x8c 0xb 0x96 0x84 0xc0 0x80 0x40 0x0 0xe4 0xe0 0xe8 0xc0 0x2 0x89 0x0 0xc0 0xc0 0x80 0x0 0x0 0xa0 0xe0 0xc0 0x3 0x0
  

: wall-1-5+0+1
  0x8c 0xff 0xf8 0xf3 0x77 0xd7 0xb7 0xd0 0x69 0x23 0x83 0x43 0x2 0x8c 0x0 0x7 0x5 0x3 0x3 0x1 0x0 0x3 0x3 0x1 0x0 0x0 0x89 0x7 0x3 0x3 0x1 0x0 0x0 0xff 0x0 0xe7 0x3 0xef 0x8c 0x0 0xf1 0xf3 0xf7 0xf3 0xf7 0x0 0xf3 0xf7 0xf3 0xf7 0xf3 0x8c 0x0 0xfb 0xfb 0xf9 0xf0 0x0 0xef 0xe7 0xa7 0xc3 0x0 0x0
  
  
: wall-1-5+48+1
  0x89 0xff 0x0 0xc2 0xf3 0xfb 0xea 0x0 0xc6 0xe7 0x3 0xf7 0x8c 0x0 0xf9 0xfb 0xf3 0xf3 0xe3 0x0 0xeb 0xef 0xef 0x8e 0x0 0x8c 0xf5 0xf7 0xe7 0x85 0x0 0x0 0xff 0x1f 0xf 0xce 0xcb 0xed 0x87 0xb 0x96 0x84 0xc1 0x82 0x40 0x0 0x3 0xe0 0x8b 0xc0 0x0 0x0 0xc0 0xc0 0x80 0x0 0x0 0xa0 0xe0 0xc0 0x3 0x0
  

: wall-1-6+0+1
  0x8c 0xff 0xf8 0xf3 0x77 0xd7 0xb7 0xd0 0x69 0x23 0x83 0x43 0x2 0x8c 0x0 0x7 0x5 0x3 0x3 0x1 0x0 0x3 0x3 0x1 0x0 0x0 0x89 0x7 0x3 0x3 0x1 0x0 0x0 0xff 0x0 0xe7 0x3 0xef 0x8c 0x0 0xf1 0xf3 0xf7 0xf3 0xf7 0x0 0xf3 0xf7 0xf3 0xf7 0xf3 0x8c 0x0 0xfb 0xfb 0xf9 0xf0 0x0 0xef 0xe7 0xa7 0xc3 0x0 0x0
  
  
: wall-1-6+48+1
  0x89 0xff 0x0 0xc2 0xf3 0xfb 0xea 0x0 0xc6 0xe7 0x3 0xf7 0x8c 0x0 0xf9 0xfb 0xf3 0xf3 0xe3 0x0 0xeb 0xef 0xef 0x8e 0x0 0x8c 0xf5 0xf7 0xe7 0x85 0x0 0x0 0xff 0x1f 0xf 0xce 0xcb 0xed 0x87 0xb 0x96 0x84 0xc1 0x82 0x40 0x0 0x3 0xe0 0x8b 0xc0 0x0 0x0 0xc0 0xc0 0x80 0x0 0x0 0xa0 0xe0 0xc0 0x3 0x0
  

: wall-2-3+0+1
  0x8c 0xf 0x87 0xe7 0xe7 0x43 0x6 0x83 0xf1 0xf0 0xf0 0x72 0x5 0x8c 0xe0 0xe4 0xe2 0xe0 0xe2 0xc1 0x82 0x78 0xf0 0xf0 0xe0 0xc0 0x86 0x80 0x20 0xe0 0xe0 0x80 0x0 0x5 0xff 0x8c 0xdf 0xff 0xb2 0x41 0x0 0xd6 0x28 0x0 0xb2 0xca 0x0 0x54 0x83 0x8a 0x60 0x94 0xa 0x0
  
  
: wall-2-3+48+1
  0x5 0xff 0x8c 0xfb 0xff 0x4d 0x82 0x0 0x6b 0x14 0x0 0x4d 0x53 0x0 0x2a 0x83 0x51 0x6 0x29 0xa 0x0 0x8c 0xf0 0xe1 0xe7 0xe7 0xc2 0x60 0xc1 0x8f 0xf 0xf 0x4e 0xa0 0x8c 0x7 0x27 0x47 0x7 0x47 0x83 0x41 0x1e 0xf 0xf 0x7 0x3 0x86 0x1 0x4 0x7 0x7 0x1 0x0
  

: wall-2-4+0+1
  0x8c 0xf 0x87 0xe7 0xe7 0x47 0x6 0x83 0xf1 0xf0 0xf1 0x70 0x0 0x8c 0xe0 0xe4 0xe1 0xe0 0xe0 0xc2 0x80 0x78 0xf0 0xf0 0xe0 0xc0 0x86 0x80 0x20 0xe0 0xe0 0x80 0x0 0x5 0xff 0x85 0xdf 0xff 0xb2 0x40 0x10 0x3 0x0 0x85 0xa 0x50 0x88 0x11 0x2 0xc 0x0
  
  
: wall-2-4+48+1
  0x5 0xff 0x85 0xfb 0xff 0x4d 0x2 0x8 0x3 0x0 0x85 0x50 0xa 0x11 0x88 0x40 0xc 0x0 0x8c 0xf0 0xe1 0xe7 0xe7 0xe2 0x60 0xc1 0x8f 0xf 0x8f 0xe 0x0 0x8c 0x7 0x27 0x87 0x7 0x7 0x43 0x1 0x1e 0xf 0xf 0x7 0x3 0x86 0x1 0x4 0x7 0x7 0x1 0x0
  

: wall-2-5+0+1
  0x8c 0xf 0x87 0xe7 0xe7 0x47 0x6 0x83 0xf1 0xf0 0xf1 0x70 0x0 0x5 0xe0 0x8c 0xc0 0x80 0x78 0xf0 0xf0 0xe0 0xc0 0x80 0x20 0xe0 0xe0 0x80 0x81 0x0 0x5 0xff 0x85 0xdf 0xff 0xb2 0x40 0x10 0xc 0x0 0x8 0x0
  
  
: wall-2-5+48+1
  0x5 0xff 0x85 0xfb 0xff 0x4d 0x2 0x8 0xc 0x0 0x8 0x0 0x8c 0xf0 0xe1 0xe7 0xe7 0xe2 0x60 0xc1 0x8f 0xf 0x8f 0xe 0x0 0x5 0x7 0x8c 0x3 0x1 0x1e 0xf 0xf 0x7 0x3 0x1 0x4 0x7 0x7 0x1 0x81 0x0
  

: wall-2-6+0+1
  0x8c 0xf 0x87 0xe7 0xe7 0x47 0x6 0x83 0xf1 0xf0 0xf1 0x70 0x0 0x5 0xe0 0x8c 0xc0 0x80 0x78 0xf0 0xf0 0xe0 0xc0 0x80 0x20 0xe0 0xe0 0x80 0x81 0x0 0x5 0xff 0x85 0xdf 0xff 0xb2 0x40 0x10 0xc 0x0 0x8 0x0
  
  
: wall-2-6+48+1
  0x5 0xff 0x85 0xfb 0xff 0x4d 0x2 0x8 0xc 0x0 0x8 0x0 0x8c 0xf0 0xe1 0xe7 0xe7 0xe2 0x60 0xc1 0x8f 0xf 0x8f 0xe 0x0 0x5 0x7 0x8c 0x3 0x1 0x1e 0xf 0xf 0x7 0x3 0x1 0x4 0x7 0x7 0x1 0x81 0x0
  
  
: wall-2+16+1
  0x6 0xff 0x8c 0x0 0x18 0x3d 0x0 0x31 0x7b 0xbb 0x0 0x79 0x3d 0x1c 0x0 0x85 0xd7 0x73 0x0 0x1c 0xc 0x7 0x0 0x6 0xff 0x84 0x0 0x79 0xf3 0x0 0x3 0xf7 0x8a 0x0 0xf9 0xfb 0xfb 0x0 0xcf 0xcf 0x0 0xf3 0x71 0x7 0x0
  
: wall-2+32+1
  0x6 0xff 0x8c 0x0 0xcf 0xef 0x0 0xe7 0xf7 0xf7 0x0 0xef 0xef 0xcf 0x0 0x85 0x7d 0x79 0x0 0xdf 0xcf 0x7 0x0 0x6 0xff 0x8c 0x0 0x38 0x9c 0x0 0xcc 0xde 0x9f 0x0 0x9e 0xbc 0x38 0x0 0x85 0xeb 0xcc 0x0 0xbc 0x38 0x7 0x0
  
  
: wall-3+16+1
  0x7 0xff 0x8c 0x3f 0x2 0x40 0x6a 0x5 0xb0 0x25 0xa 0x40 0x2 0xa1 0x2 0x82 0x6d 0x40 0x9 0x0 0x9 0xff 0x8b 0x0 0x2a 0x54 0x0 0x1d 0xaa 0x0 0xa2 0x9 0x54 0x3a 0xa 0x0
  
: wall-3+32+1
  0x9 0xff 0x8b 0x0 0xa2 0x55 0x0 0x51 0xaa 0x0 0x95 0x28 0x44 0xaa 0xa 0x0 0x7 0xff 0x8c 0xfc 0x40 0x2 0x96 0x60 0xd 0x44 0xf0 0x2 0x40 0x85 0x40 0x82 0xb6 0x2 0x9 0x0
  
  
: wall-3-3+16+1
  0x7 0xff 0x8c 0x7f 0x55 0x0 0x2a 0x55 0x0 0x65 0x12 0x0 0x2a 0x91 0x42 0x81 0x25 0xa 0x0 0x9 0xff 0x8b 0x0 0x2a 0x54 0x0 0x1d 0xaa 0x0 0xa2 0x9 0x54 0x3a 0xa 0x0
  
: wall-3-3+32+1
  0x9 0xff 0x8b 0x0 0xa2 0x55 0x0 0x51 0xaa 0x0 0x95 0x28 0x44 0xaa 0xa 0x0 0x7 0xff 0x8c 0xfe 0x94 0x0 0x94 0x6a 0x0 0x46 0xe8 0x0 0x54 0x89 0x42 0x81 0xa4 0xa 0x0
  
  
: wall-3-4+16+1
  0x7 0xff 0x8c 0x7f 0x7a 0x28 0x2 0x1 0x20 0x1 0x42 0x10 0x22 0x1 0x2 0x81 0x1 0xa 0x0 0x9 0xff 0x8b 0x0 0x2a 0x54 0x0 0x1d 0xaa 0x0 0xa2 0x9 0x54 0x3a 0xa 0x0
  
: wall-3-4+32+1
  0x9 0xff 0x8b 0x0 0xa2 0x55 0x0 0x51 0xaa 0x0 0x95 0x28 0x44 0xaa 0xa 0x0 0x7 0xff 0x8c 0xfe 0x5c 0x14 0x80 0x40 0x2 0x40 0xc8 0x4 0x40 0x88 0x40 0x81 0x80 0xa 0x0
  
  
: wall-3-5+16+1
  0x7 0xff 0x8c 0x3f 0x5a 0x28 0x52 0x1 0x0 0x1 0x2 0x0 0x2 0x1 0x2 0x81 0x1 0xa 0x0 0x9 0xff 0x8b 0x0 0x2a 0x54 0x0 0x1d 0xaa 0x0 0xa2 0x9 0x54 0x3a 0xa 0x0
  
: wall-3-5+32+1
  0x9 0xff 0x8b 0x0 0xa2 0x55 0x0 0x51 0xaa 0x0 0x95 0x28 0x44 0xaa 0xa 0x0 0x7 0xff 0x8c 0xfc 0x5a 0x14 0x8a 0x40 0x0 0x40 0xc0 0x0 0x40 0x80 0x40 0x81 0x80 0xa 0x0
  
  
: wall-3-6+16+1
  0x7 0xff 0x8c 0x3f 0x5a 0x28 0x12 0x21 0x0 0x1 0x2 0x0 0x2 0x1 0x2 0x81 0x1 0xa 0x0 0x9 0xff 0x8b 0x0 0x2a 0x54 0x0 0x1d 0xaa 0x0 0xa2 0x9 0x54 0x3a 0xa 0x0
  
: wall-3-6+32+1
  0x9 0xff 0x8b 0x0 0xa2 0x55 0x0 0x51 0xaa 0x0 0x95 0x28 0x44 0xaa 0xa 0x0 0x7 0xff 0x8c 0xfc 0x5a 0x14 0x88 0x44 0x0 0x40 0xc0 0x0 0x40 0x80 0x40 0x81 0x80 0xa 0x0
  
  
: wall-4+16+1
  0x7 0xff 0x8c 0x3f 0x2 0x40 0x68 0x0 0xb0 0x20 0x9 0x42 0x12 0xa0 0x0 0x82 0x68 0x40 0x9 0x0 0x9 0xff 0x89 0x77 0xa 0x0 0x85 0x20 0x0 0x8 0x11 0xa2 0xc 0x0
  
: wall-4+32+1
  0x9 0xff 0x89 0xee 0xb0 0x0 0x1 0x28 0x44 0x20 0x0 0x1 0xc 0x0 0x7 0xff 0x8c 0xfc 0x40 0x2 0x16 0x0 0xd 0x4 0x90 0x42 0x48 0x5 0x0 0x82 0x16 0x2 0x9 0x0
  
  
: wall-4-3+16+1
  0x7 0xff 0x8c 0x7f 0x55 0x0 0x2c 0x50 0x0 0x64 0x15 0x0 0x28 0x94 0x40 0x81 0x20 0xa 0x0 0x9 0xff 0x89 0x77 0xa 0x0 0x85 0x20 0x0 0x8 0x11 0xa2 0xc 0x0
  
: wall-4-3+32+1
  0x9 0xff 0x89 0xee 0xb0 0x0 0x1 0x28 0x44 0x20 0x0 0x1 0xc 0x0 0x7 0xff 0x8c 0xfe 0x94 0x0 0x34 0xa 0x0 0x26 0xa8 0x0 0x14 0x29 0x2 0x81 0x4 0xa 0x0
  
  
: wall-4-4+16+1
  0x7 0xff 0x8c 0x3f 0x2 0x40 0x68 0x0 0xb0 0x20 0x9 0x40 0x10 0xa0 0x0 0x82 0x68 0x40 0x9 0x0 0x9 0xff 0x89 0x77 0xa 0x0 0x5 0x20 0x0 0x88 0x11 0x22 0xc 0x0
  
: wall-4-4+32+1
  0x9 0xff 0x88 0xee 0xb0 0x0 0x0 0x28 0x44 0x20 0x1 0xc 0x0 0x1 0x0 0x7 0xff 0x8c 0xfc 0x40 0x2 0x16 0x0 0xd 0x84 0x10 0x2 0x8 0x5 0x0 0x82 0x16 0x2 0x9 0x0
  
  
: wall-4-5+16+1
  0x7 0xff 0x8c 0x3f 0x2 0x40 0x68 0x0 0xb0 0x20 0x8 0x40 0x10 0xa0 0x0 0x82 0x68 0x40 0x9 0x0 0x9 0xff 0x89 0x77 0xa 0x0 0x5 0x20 0x0 0x8 0x11 0x22 0xc 0x0
  
: wall-4-5+32+1
  0x9 0xff 0x87 0xee 0xb0 0x0 0x0 0x28 0x44 0x20 0xc 0x0 0x2 0x0 0x7 0xff 0x8c 0xfc 0x40 0x2 0x16 0x0 0xd 0x4 0x10 0x2 0x8 0x5 0x0 0x82 0x16 0x2 0x9 0x0
  
  
: wall-4-6+16+1
  0x7 0xff 0x8c 0x3f 0x2 0x40 0x68 0x0 0xb0 0x20 0x8 0x40 0x10 0xa0 0x0 0x82 0x68 0x40 0x9 0x0 0x9 0xff 0x89 0x77 0xa 0x0 0x5 0x20 0x0 0x8 0x11 0x22 0xc 0x0
  
: wall-4-6+32+1
  0x9 0xff 0x87 0xee 0xb0 0x0 0x0 0x28 0x44 0x20 0xc 0x0 0x2 0x0 0x7 0xff 0x8c 0xfc 0x40 0x2 0x16 0x0 0xd 0x4 0x10 0x2 0x8 0x5 0x0 0x82 0x16 0x2 0x9 0x0
  
  
: wall-5+16+1
  0x7 0xff 0x8c 0x3f 0x2 0x40 0x68 0x0 0xb0 0x20 0x9 0x42 0x12 0xa0 0x0 0x82 0x68 0x40 0x9 0x0 0x9 0xff 0x89 0x77 0xa 0x0 0x80 0x0 0x0 0x48 0x0 0x80 0xc 0x0
  
: wall-5+32+1
  0x9 0xff 0x89 0xee 0xb0 0x0 0x1 0x0 0x0 0x2 0x0 0x1 0xc 0x0 0x7 0xff 0x8c 0xfc 0x40 0x2 0x16 0x0 0xd 0x4 0x90 0x42 0x48 0x5 0x0 0x82 0x16 0x2 0x9 0x0
  
  
: wall-5-3+16+1
  0x7 0xff 0x8c 0x7f 0x55 0x0 0x2c 0x50 0x0 0x64 0x15 0x0 0x28 0x94 0x40 0x81 0x20 0xa 0x0 0x9 0xff 0x89 0x77 0xa 0x0 0x80 0x0 0x0 0x48 0x0 0x80 0xc 0x0
  
: wall-5-3+32+1
  0x9 0xff 0x89 0xee 0xb0 0x0 0x1 0x0 0x0 0x2 0x0 0x1 0xc 0x0 0x7 0xff 0x8c 0xfe 0x94 0x0 0x34 0xa 0x0 0x26 0xa8 0x0 0x14 0x29 0x2 0x81 0x4 0xa 0x0
  
  
: wall-5-4+16+1
  0x7 0xff 0x8c 0x3f 0x2 0x40 0x68 0x0 0xb0 0x20 0x9 0x40 0x10 0xa0 0x0 0x82 0x68 0x40 0x9 0x0 0x9 0xff 0x82 0x77 0xa 0x4 0x0 0x81 0x88 0xc 0x0 0x2 0x0
  
: wall-5-4+32+1
  0x9 0xff 0x82 0xee 0xb0 0x5 0x0 0x81 0x1 0xc 0x0 0x1 0x0 0x7 0xff 0x8c 0xfc 0x40 0x2 0x16 0x0 0xd 0x84 0x10 0x2 0x8 0x5 0x0 0x82 0x16 0x2 0x9 0x0
  
  
: wall-5-5-3+16+1
  0x7 0xff 0x8c 0x7f 0x55 0x0 0x2c 0x50 0x0 0x64 0x15 0x0 0x28 0x94 0x40 0x81 0x20 0xa 0x0 0x9 0xff 0x89 0x77 0xa 0x0 0x80 0x0 0x0 0x8 0x0 0x80 0xc 0x0
  
: wall-5-5-3+32+1
  0x9 0xff 0x84 0xee 0xb0 0x0 0x1 0x4 0x0 0x81 0x1 0xc 0x0 0x7 0xff 0x8c 0xfe 0x94 0x0 0x34 0xa 0x0 0x26 0xa8 0x0 0x14 0x29 0x2 0x81 0x4 0xa 0x0
  
  
: wall-5-5+16+1
  0x7 0xff 0x8c 0x3f 0x2 0x40 0x68 0x0 0xb0 0x20 0x9 0x42 0x12 0xa0 0x0 0x82 0x68 0x40 0x9 0x0 0x9 0xff 0x89 0x77 0xa 0x0 0x80 0x0 0x0 0x8 0x0 0x80 0xc 0x0
  
: wall-5-5+32+1
  0x9 0xff 0x84 0xee 0xb0 0x0 0x1 0x4 0x0 0x81 0x1 0xc 0x0 0x7 0xff 0x8c 0xfc 0x40 0x2 0x16 0x0 0xd 0x4 0x90 0x42 0x48 0x5 0x0 0x82 0x16 0x2 0x9 0x0
  
  
: wall-5-6+16+1
  0x7 0xff 0x8c 0x3f 0x2 0x40 0x68 0x0 0xb0 0x20 0x9 0x42 0x12 0xa0 0x0 0x82 0x68 0x40 0x9 0x0 0x9 0xff 0x84 0x77 0xa 0x0 0x80 0x4 0x0 0x81 0x80 0xc 0x0
  
: wall-5-6+32+1
  0x9 0xff 0x84 0xee 0xb0 0x0 0x1 0x4 0x0 0x81 0x1 0xc 0x0 0x7 0xff 0x8c 0xfc 0x40 0x2 0x16 0x0 0xd 0x4 0x90 0x42 0x48 0x5 0x0 0x82 0x16 0x2 0x9 0x0
  
  
: wall-5-6-3+16+1
  0x7 0xff 0x8c 0x7f 0x55 0x0 0x2c 0x50 0x0 0x64 0x15 0x0 0x28 0x94 0x40 0x81 0x20 0xa 0x0 0x9 0xff 0x89 0x77 0xa 0x0 0x80 0x0 0x0 0x8 0x0 0x80 0xc 0x0
  
: wall-5-6-3+32+1
  0x9 0xff 0x84 0xee 0xb0 0x0 0x1 0x4 0x0 0x81 0x1 0xc 0x0 0x7 0xff 0x8c 0xfe 0x94 0x0 0x34 0xa 0x0 0x26 0xa8 0x0 0x14 0x29 0x2 0x81 0x4 0xa 0x0
  

#####################
# Nodes and leafs - the binary tree that does the decision making
# This needs to be below the 3D image data in order to be able to reference the
# labels in macros.

# Convenience macros and constants

:const numc14nodes 14
:const numc23nodes 26
:const numc14leafs 14
:const numc23leafs 27

:macro coord X Y {
  :byte { ( ( X + 1 ) << 4 ) | Y }
}

:macro c1node X { :byte { X } }
:macro c2node X { :byte { numc14nodes + X } }
:macro c3node X { :byte { numc14nodes + numc23nodes + X } }
:macro c4node X { :byte { numc14nodes + numc23nodes + numc23nodes + X } }

:macro c1leaf X { :byte { 0x80 + X } }
:macro c2leaf X { :byte { 0x80 + numc14leafs + X } }
:macro c3leaf X { :byte { 0x80 + numc14leafs + numc23leafs + X } }
:macro c4leaf X { :byte { 0x80 + numc14leafs + numc23leafs + numc23leafs + X } }


# Nodes represent decisions: given this point relative to the player, if there
# is a wall there or not, go to this node or leaf. The most significant bit of
# the target entry indicates if its a node (0) or a leaf (1). This
# implementation detail is hidden through the macros.
: nodes

: nodes-column-one
#        X Y  no wall   wall
  coord -1 0  c1node 3  c1node 1   # node 0
  coord  0 1  c1node 2  c1leaf 3   # node 1
  coord -1 1  c1node 9  c1leaf 0   # node 2
  coord  0 1  c1leaf 1  c1node 4   # node 3
  coord -1 1  c1node 5  c1leaf 4   # node 4
  coord -1 2  c1node 6  c1leaf 5   # node 5
  coord -1 3  c1node 7  c1leaf 6   # node 6
  coord -1 4  c1node 8  c1leaf 7   # node 7
  coord -1 5  c1leaf 9  c1leaf 8   # node 8
  coord  0 2  c1leaf 2  c1node 10  # node 9
  coord -1 2  c1node 11 c1leaf 2   # node 10
  coord -1 3  c1node 12 c1leaf 10  # node 11
  coord -1 4  c1node 13 c1leaf 11  # node 12
  coord -1 5  c1leaf 13 c1leaf 12  # node 13

: nodes-column-two
#        X Y  no wall    wall
  coord  0 1  c2node 1   c2leaf 8   # node 0
  coord  0 2  c2node 2   c2leaf 9   # node 1
  coord -1 2  c2node 3   c2node 9   # node 2
  coord  0 3  c2node 4   c2node 18  # node 3
  coord  0 4  c2node 5   c2leaf 16  # node 4
  coord  0 5  c2node 6   c2node 8   # node 5
  coord -1 4  c2leaf 2   c2node 7   # node 6
  coord -1 5  c2leaf 1   c2leaf 1   # node 7
  coord -1 4  c2node 25  c2leaf 21  # node 8
  coord  0 3  c2node 10  c2leaf 10  # node 9
  coord -1 3  c2node 11  c2node 13  # node 10
  coord  0 4  c2node 12  c2node 21  # node 11
  coord  0 5  c2node 24  c2leaf 22  # node 12
  coord  0 4  c2node 14  c2leaf 15  # node 13
  coord -1 4  c2node 15  c2node 16  # node 14
  coord  0 5  c2leaf 6   c2node 23  # node 15
  coord  0 5  c2node 17  c2leaf 20  # node 16
  coord -1 5  c2leaf 7   c2leaf 0   # node 17
  coord -1 3  c2node 19  c2leaf 11  # node 18
  coord -1 4  c2node 20  c2leaf 12  # node 19
  coord -1 5  c2leaf 14  c2leaf 13  # node 20
  coord -1 4  c2node 22  c2leaf 17  # node 21
  coord -1 5  c2leaf 19  c2leaf 18  # node 22
  coord -1 5  c2leaf 25  c2leaf 23  # node 23
  coord -1 5  c2leaf 5   c2leaf 4   # node 24
  coord -1 5  c2leaf 26  c2leaf 24  # node 25

: nodes-column-three
#        X Y  no wall    wall
  coord  0 1  c3node 1   c3leaf 8   # node 0
  coord  0 2  c3node 2   c3leaf 9   # node 1
  coord  1 2  c3node 3   c3node 9   # node 2
  coord  0 3  c3node 4   c3node 18  # node 3
  coord  0 4  c3node 5   c3leaf 16  # node 4
  coord  0 5  c3node 6   c3node 8   # node 5
  coord  1 4  c3leaf 2   c3node 7   # node 6
  coord  1 5  c3leaf 3   c3leaf 1   # node 7
  coord  1 4  c3node 25  c3leaf 21  # node 8
  coord  0 3  c3node 10  c3leaf 10  # node 9
  coord  1 3  c3node 11  c3node 13  # node 10
  coord  0 4  c3node 12  c3node 21  # node 11
  coord  0 5  c3node 24  c3leaf 22  # node 12
  coord  0 4  c3node 14  c3leaf 15  # node 13
  coord  1 4  c3node 15  c3node 16  # node 14
  coord  0 5  c3leaf 6   c3node 23  # node 15
  coord  0 5  c3node 17  c3leaf 20  # node 16
  coord  1 5  c3leaf 7   c3leaf 0   # node 17
  coord  1 3  c3node 19  c3leaf 11  # node 18
  coord  1 4  c3node 20  c3leaf 12  # node 19
  coord  1 5  c3leaf 14  c3leaf 13  # node 20
  coord  1 4  c3node 22  c3leaf 17  # node 21
  coord  1 5  c3leaf 19  c3leaf 18  # node 22
  coord  1 5  c3leaf 25  c3leaf 23  # node 23
  coord  1 5  c3leaf 5   c3leaf 4   # node 24
  coord  1 5  c3leaf 26  c3leaf 24  # node 25

: nodes-column-four
#        X Y  no wall   wall
  coord  1 0  c4node 3  c4node 1   # node 0
  coord  0 1  c4node 2  c4leaf 3   # node 1
  coord  1 1  c4node 9  c4leaf 0   # node 2
  coord  0 1  c4leaf 1  c4node 4   # node 3
  coord  1 1  c4node 5  c4leaf 4   # node 4
  coord  1 2  c4node 6  c4leaf 5   # node 5
  coord  1 3  c4node 7  c4leaf 6   # node 6
  coord  1 4  c4node 8  c4leaf 7   # node 7
  coord  1 5  c4leaf 9  c4leaf 8   # node 8
  coord  0 2  c4leaf 2  c4node 10  # node 9
  coord  1 2  c4node 11 c4leaf 2   # node 10
  coord  1 3  c4node 12 c4leaf 10  # node 11
  coord  1 4  c4node 13 c4leaf 11  # node 12
  coord  1 5  c4leaf 13 c4leaf 12  # node 13


# Leafs represent images to be rendered. A path of nodes should always lead to
# a leaf. The leafs themselves are pointers to the right images.
: leafs

  # Column 1
  pointer hall-0+0+1      # leaf 0
  pointer hall-1+0+1      # leaf 1
  pointer hall-2+0+1      # leaf 2
  pointer wall-1+0+1      # leaf 3
  pointer wall-1-1+0+1    # leaf 4
  pointer wall-1-2+0+1    # leaf 5
  pointer wall-1-3+0+1    # leaf 6
  pointer wall-1-4+0+1    # leaf 7
  pointer wall-1-5+0+1    # leaf 8
  pointer wall-1-6+0+1    # leaf 9
  pointer wall-2-3+0+1    # leaf 10
  pointer wall-2-4+0+1    # leaf 11
  pointer wall-2-5+0+1    # leaf 12
  pointer wall-2-6+0+1    # leaf 13

  # Column 2
  pointer hall-0+16+1     # leaf 0
  pointer hall-3+16+1     # leaf 1
  pointer hall-3-5+16+1   # leaf 2
  pointer hall-3-6+16+1   # leaf 3
  pointer hall-4+16+1     # leaf 4
  pointer hall-4-6+16+1   # leaf 5
  pointer hall-5+16+1     # leaf 6
  pointer hall-6+16+1     # leaf 7
  pointer wall-1+16+1     # leaf 8
  pointer wall-2+16+1     # leaf 9
  pointer wall-3+16+1     # leaf 10
  pointer wall-3-3+16+1   # leaf 11
  pointer wall-3-4+16+1   # leaf 12
  pointer wall-3-5+16+1   # leaf 13
  pointer wall-3-6+16+1   # leaf 14
  pointer wall-4+16+1     # leaf 15
  pointer wall-4-3+16+1   # leaf 16
  pointer wall-4-4+16+1   # leaf 17
  pointer wall-4-5+16+1   # leaf 18
  pointer wall-4-6+16+1   # leaf 19
  pointer wall-5+16+1     # leaf 20
  pointer wall-5-3+16+1   # leaf 21
  pointer wall-5-4+16+1   # leaf 22
  pointer wall-5-5+16+1   # leaf 23
  pointer wall-5-5-3+16+1 # leaf 24
  pointer wall-5-6+16+1   # leaf 25
  pointer wall-5-6-3+16+1 # leaf 26

  # Column 3
  pointer hall-0+32+1     # leaf 0
  pointer hall-3+32+1     # leaf 1
  pointer hall-3-5+32+1   # leaf 2
  pointer hall-3-6+32+1   # leaf 3
  pointer hall-4+32+1     # leaf 4
  pointer hall-4-6+32+1   # leaf 5
  pointer hall-5+32+1     # leaf 6
  pointer hall-6+32+1     # leaf 7
  pointer wall-1+32+1     # leaf 8
  pointer wall-2+32+1     # leaf 9
  pointer wall-3+32+1     # leaf 10
  pointer wall-3-3+32+1   # leaf 11
  pointer wall-3-4+32+1   # leaf 12
  pointer wall-3-5+32+1   # leaf 13
  pointer wall-3-6+32+1   # leaf 14
  pointer wall-4+32+1     # leaf 15
  pointer wall-4-3+32+1   # leaf 16
  pointer wall-4-4+32+1   # leaf 17
  pointer wall-4-5+32+1   # leaf 18
  pointer wall-4-6+32+1   # leaf 19
  pointer wall-5+32+1     # leaf 20
  pointer wall-5-3+32+1   # leaf 21
  pointer wall-5-4+32+1   # leaf 22
  pointer wall-5-5+32+1   # leaf 23
  pointer wall-5-5-3+32+1 # leaf 24
  pointer wall-5-6+32+1   # leaf 25
  pointer wall-5-6-3+32+1 # leaf 26

  # Column 4
  pointer hall-0+48+1     # leaf 0
  pointer hall-1+48+1     # leaf 1
  pointer hall-2+48+1     # leaf 2
  pointer wall-1+48+1     # leaf 3
  pointer wall-1-1+48+1   # leaf 4
  pointer wall-1-2+48+1   # leaf 5
  pointer wall-1-3+48+1   # leaf 6
  pointer wall-1-4+48+1   # leaf 7
  pointer wall-1-5+48+1   # leaf 8
  pointer wall-1-6+48+1   # leaf 9
  pointer wall-2-3+48+1   # leaf 10
  pointer wall-2-4+48+1   # leaf 11
  pointer wall-2-5+48+1   # leaf 12
  pointer wall-2-6+48+1   # leaf 13
: end-of-code

:org 0x200

#####################
# 3D Viper Maze
# An Octojam 7 entry
# By Timendus
# https://github.com/Timendus/3d-viper-maze

: main
  # Start with training map
  send-player-back-to-start

  #i := end-of-code
  #:breakpoint test

: main-redraw
  clear
  render-3d
  mark-screen-clean
: main-loop
  check-keys
  i := long dirty    # Is the screen dirty?
  load v0
  if v0 == 1 then jump main-redraw
  jump main-loop

# Mark the screen dirty or clean to manage redraws

: mark-screen-dirty
  i := long dirty
  v0 := 1
  save v0
  return

: mark-screen-clean
  i := long dirty
  v0 := 0
  save v0
  return
#####################
# Look at place (v3 - 1, v4) relative to the player
# Return value at that position in v0
: look-ahead
  i := long player
  load v2
  if v2 == 0 then jump look-ahead-up
  if v2 == 1 then jump look-ahead-right
  if v2 == 2 then jump look-ahead-down
  # Else fall through
: look-ahead-left
  v0 -= v4
  v1 += 1
  v1 -= v3
  jump map-get
: look-ahead-right
  v0 += v4
  v1 -= 1
  v1 += v3
  jump map-get
: look-ahead-up
  v0 -= 1
  v0 += v3
  v1 -= v4
  jump map-get
: look-ahead-down
  v0 += 1
  v0 -= v3
  v1 += v4
  jump map-get

#####################
# Query the map for the value at a given position
# Input: X in v0, Y in v1 (destructive)
# Output: map value in v0
: map-get
  map-point
  load v0
  return

# Input: X in v0, Y in v1 (destructive)
# Output: i points to right place on map
# Destroys v0, v1, v2, v3
: map-point
  v2 := v0
  v3 := v1
  map-start
  i += v2
  v3 <<= v3
  v3 <<= v3
  v3 <<= v3
  v3 <<= v3
  i += v3
  return

# Destroys v0, v1
: map-start
  i := long current-map
  load v1
  i := map-point-smc
  save v1
  0xF0 0x00 # i := long ...
  : map-point-smc
  0 0
  return

# Destroys v0, v1
: map-metadata-start
  map-start
  v0 := 128
  i += v0
  return

#####################
# Map switching routines
# `select-map` loads the right map and player position

# Input: Address of map 'unpacked' in v0 and v1
: select-map
  # Make new map the current map
  i := long current-map
  save v1
  # Fall through

: send-player-back-to-start
  v4 := 0
  v5 := 0
: select-map-loop
  v0 := v4
  v1 := v5
  map-get
  if v0 == 0x02 then jump select-map-start-found
  v4 += 1
  if v4 != 15 then jump select-map-loop
  v4 := 0
  v5 += 1
  jump select-map-loop
: select-map-start-found
  # Put the player in the start position (direction is fixed)
  i := long player
  v0 := v4
  v1 := v5
  v2 := 1
  save v2
  return
#####################
# Render the map to the screen in pseudo-3D
# (for the actual gameplay)
: render-3d
  column-two
  column-three
  column-one
  jump column-four

: column-one
  i := long nodes-column-one
  find-sprite
  decompress
  v0 := 0
  jump render-column

: column-two
  i := long nodes-column-two
  find-sprite
  decompress
  v0 := 16
  jump render-column

: column-three
  i := long nodes-column-three
  find-sprite
  decompress
  v0 := 32
  jump render-column

: column-four
  i := long nodes-column-four
  find-sprite
  decompress
  v0 := 48
  # Fall through

: render-column
  i := decompression-buffer
  v2 := 15
  v3 := 1

  v1 := 1
  sprite v0 v1 15
  i += v2
  v1 := 16
  sprite v0 v1 15
  i += v2
  v0 += 8

  v1 := 1
  sprite v0 v1 15
  i += v2
  v1 := 16
  sprite v0 v1 15
  return

#####################
# This routine walks through the binary tree with nodes and leafs
# Input: i pointing to a node
# Output: i pointing to the image to be rendered
: find-sprite
  # Load this node and find what's there
  load v2
  v5 := v1
  v6 := v2
  # Coordinates are stored together in first byte, so unpack
  v1 := 0x0F
  v4 := v0
  v4 &= v1
  v0 >>= v0
  v0 >>= v0
  v0 >>= v0
  v0 >>= v0
  v0 &= v1
  v3 := v0
  look-ahead
  # Did we encounter a wall?
  if v0 == 1 begin
    v0 := v6
  else
    v0 := v5
  end
  # Is the next step a node or a leaf?
  v1 := 0x80
  v2 := v0
  v2 &= v1
  if v2 == 0x80 begin
    # Next is a leaf, extract the pointer
    i := long leafs
    v1 := 0b01111111
    v0 &= v1 # AND out the leaf indicator bit
    v0 <<= v0
    i += v0
    load v1
    # We now have the address of the leaf image in v0 and v1
    return
  else
    # Next is a node, load it and restart
    i := long nodes
    i += v0
    i += v0
    i += v0
    jump find-sprite
  end
#####################
# Non-blocking key input check
# Updates the player data on input, checks for collisions
# Destroys v0 - v3
: check-keys
  i := long player
  load v2

  # Rotation
  v0 := OCTO_KEY_A
  if v0 key then jump rotate-left
  v0 := OCTO_KEY_D
  if v0 key then jump rotate-right

  # Movement
  if v2 == 0 then jump going-up
  if v2 == 1 then jump going-right
  if v2 == 2 then jump going-down
  # Else fall through:

: going-left
  v0 := OCTO_KEY_W
  if v0 key then jump move-left
  v0 := OCTO_KEY_S
  if v0 key then jump move-right
  return
: going-up
  v0 := OCTO_KEY_W
  if v0 key then jump move-up
  v0 := OCTO_KEY_S
  if v0 key then jump move-down
  return
: going-right
  v0 := OCTO_KEY_W
  if v0 key then jump move-right
  v0 := OCTO_KEY_S
  if v0 key then jump move-left
  return
: going-down
  v0 := OCTO_KEY_W
  if v0 key then jump move-down
  v0 := OCTO_KEY_S
  if v0 key then jump move-up
  return

: rotate-left
  v0 := 3
  v2 -= 1
  v0 &= v2
  i := long player-orientation
  save v0
  mark-screen-dirty
  jump wait-key-release
: rotate-right
  v0 := 3
  v2 += 1
  v0 &= v2
  i := long player-orientation
  save v0
  mark-screen-dirty
  jump wait-key-release
: move-right
  i := long player
  load v1
  v2 := 15
  v0 += 1
  v0 &= v2
  jump collide-or-save
: move-left
  i := long player
  load v1
  v2 := 15
  v0 -= 1
  v0 &= v2
  jump collide-or-save
: move-up
  i := long player
  load v1
  v2 := 7
  v1 -= 1
  v1 &= v2
  jump collide-or-save
: move-down
  i := long player
  load v1
  v2 := 7
  v1 += 1
  v1 &= v2
  # Fall through

: collide-or-save
  # Backup position
  v4 := v0
  v5 := v1
  # Is there a wall at this position?
  map-get
  if v0 == 1 then jump wait-key-release
  # Otherwise, update position
  v1 := v5
  v3 := v0 # save v0 for check-triggers
  v0 := v4
  i := long player
  save v1
  mark-screen-dirty
  # Fall through

: wait-key-release
  vA := 0
: wait-key-release-loop
  if vA key then jump wait-key-release-loop
  vA += 1
  if vA != 16 then jump wait-key-release-loop
  return

# Blocking "press any key" routine
# (does play music though)
# Returns pressed key in v5
: wait-key-press
  vA := 0
: wait-key-press-loop
  if vA key then return
  vA += 1
  if vA != 16 then jump wait-key-press-loop
  jump wait-key-press

: decompression-buffer
	0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0

: decompression-source
  0 0

#####################
# Decompress some data to the decompression buffer
# Input: start of compressed data unpacked in v0 and v1
# Output: 60 uncompressed bytes in decompression-buffer
# Destroys: absolutely everything 😂

: decompress
  :monitor decompression-buffer 60
  :monitor decompression-source 2
  :alias num-bytes      vC
  :alias source-counter vD
  :alias target-counter vE
  source-counter := 0
	target-counter := 0
  i := decompression-source
  save v1

: decompress-loop
  i := decompress-loop-smc

  # Fix this once we can get rid of the long load
  #v2 := 0xA0
  #v0 |= v2
  save v1
  0xF0 0x00 # i := long ...
: decompress-loop-smc
  0 0
  # i points to start
  i += source-counter
  # i points to current run
	load v0
  vF := 0x7F
  num-bytes := v0
	num-bytes &= vF
  vF := 0x80
  vB := v0
  vB &= vF
  if vB == 0 then jump decompress-repeat
  # Fall through

# Do a plain load of the next `vC` bytes (constant time, thanks to `load vX`)

: decompress-load
  source-counter += num-bytes
  source-counter += 1
  v0 := num-bytes
  v0 -= 1
  v0 <<= v0
  v0 <<= v0
  jump0 decompress-load-bytes

: decompress-load-bytes
  load v0  jump decompress-next
  load v1  jump decompress-next
  load v2  jump decompress-next
  load v3  jump decompress-next
  load v4  jump decompress-next
  load v5  jump decompress-next
  load v6  jump decompress-next
  load v7  jump decompress-next
  load v8  jump decompress-next
  load v9  jump decompress-next
  load vA  jump decompress-next
  load vB  jump decompress-next

# Repeat the next byte `vC` times (time scales as `X + vC`)

: decompress-repeat
  source-counter += 2
  load v0
  v1 := v0
	v0 := 12
  v0 -= num-bytes
  v0 <<= v0
  vF := v1
  jump0 decompress-repeat-bytes

: decompress-repeat-bytes
  vB := vF  vA := vF  v9 := vF
  v8 := vF  v7 := vF  v6 := vF
  v5 := vF  v4 := vF  v3 := vF
  v2 := vF  v1 := vF  v0 := vF
  jump decompress-next

# Save `vC` bytes to the decompression buffer and add `vC` to the total number
# of decompressed bytes (constant time, thanks to `save vX`)

: decompress-next
  i := decompression-buffer
  i += target-counter
  target-counter += num-bytes
  vF := v0
  v0 := num-bytes
  vC := vF          # We don't need vC / num-bytes anymore
  v0 -= 1
  v0 <<= v0         # I want to do `v0 * 6` here, but I can't do it
  v0 <<= v0         # without messing up registers. So we do `v0 * 8`
  v0 <<= v0         # instead and lose a few bytes below :/
  jump0 decompress-save-bytes

: decompress-save-bytes
  v0 := vC  save v0  jump decompress-done  0 0
  v0 := vC  save v1  jump decompress-done  0 0
  v0 := vC  save v2  jump decompress-done  0 0
  v0 := vC  save v3  jump decompress-done  0 0
  v0 := vC  save v4  jump decompress-done  0 0
  v0 := vC  save v5  jump decompress-done  0 0
  v0 := vC  save v6  jump decompress-done  0 0
  v0 := vC  save v7  jump decompress-done  0 0
  v0 := vC  save v8  jump decompress-done  0 0
  v0 := vC  save v9  jump decompress-done  0 0
  v0 := vC  save vA  jump decompress-done  0 0
  v0 := vC  save vB  # Fall through

# If we have the desired number of bytes in the buffer, we're done
# Otherwise, re-unpack source pointer to v0 and v1 and restart

: decompress-done
  if target-counter == 60 then return
  i := decompression-source
  load v1
  jump decompress-loop

:org 0x2700

#####################
# Level definitions
# First nibble is a trigger (or zero for no trigger). Triggers are 1-indexed.
# Second nibble is what it should look like, MSB == 1 for invisible on mini-map

: training1
  0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01
  0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01
  0x01 0x01 0x01 0x01 0x02 0x00 0x00 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01
  0x01 0x01 0x01 0x01 0x01 0x01 0x00 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01
  0x01 0x01 0x01 0x01 0x01 0x01 0x00 0x26 0x00 0x36 0x00 0x13 0x01 0x01 0x01 0x01
  0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01
  0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01
  0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01
#####################
# Game state

: player
  0 0 # X, Y
: player-orientation
  0 # orientation

: dirty
  0

: current-map
  pointer training1
# That's all folks!
