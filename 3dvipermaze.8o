:macro pointer ADDRESS {
  :byte { ADDRESS >> 8 }
  :byte { ADDRESS }
}

:macro unpack-long ADDR {
  :calc hi { 0xFF & ADDR >> 8 }
  :calc lo { 0xFF & ADDR }
  v0 := hi
  v1 := lo
}

:alias viper-delay vE

:org 0x200

#####################
# 3D Viper Maze
# An Octojam 7 entry
# By Timendus
# https://github.com/Timendus/3d-viper-maze

: main
  # Start with training map
  send-player-back-to-start

: main-redraw
  clear
  render-3d
  mark-screen-clean
: main-loop
  check-keys
  i := long dirty    # Is the screen dirty?
  load v0
  if v0 == 1 then jump main-redraw
  jump main-loop

# Mark the screen dirty or clean to manage redraws

: mark-screen-dirty
  i := long dirty
  v0 := 1
  save v0
  return

: mark-screen-clean
  i := long dirty
  v0 := 0
  save v0
  return
#####################
# Look at place (v3 - 1, v4) relative to the player
# Return value at that position in v0
: look-ahead
  i := long player
  load v2
  if v2 == 0 then jump look-ahead-up
  if v2 == 1 then jump look-ahead-right
  if v2 == 2 then jump look-ahead-down
  # Else fall through
: look-ahead-left
  v0 -= v4
  v1 += 1
  v1 -= v3
  jump map-get
: look-ahead-right
  v0 += v4
  v1 -= 1
  v1 += v3
  jump map-get
: look-ahead-up
  v0 -= 1
  v0 += v3
  v1 -= v4
  jump map-get
: look-ahead-down
  v0 += 1
  v0 -= v3
  v1 += v4
  # Fall through

#####################
# Query the map for the value at a given position
# Input: X in v0, Y in v1 (destructive)
# Output: map value in v0
: map-get
  v2 := v0
  v3 := v1
  i := long current-map
  load v1
  i := map-get-smc
  save v1
  0xF0 0x00 # i := long ...
: map-get-smc
  0 0
  i += v2
  v3 <<= v3
  v3 <<= v3
  v3 <<= v3
  v3 <<= v3
  i += v3
  load v0
  return

#####################
# Map switching routines
# `select-map` loads the right map and player position

# Input: Address of map 'unpacked' in v0 and v1
: select-map
  # Make new map the current map
  i := long current-map
  save v1
  # Fall through

: send-player-back-to-start
  v4 := 0
  v5 := 0
: select-map-loop
  v0 := v4
  v1 := v5
  map-get
  if v0 == 0x02 then jump select-map-start-found
  v4 += 1
  if v4 != 15 then jump select-map-loop
  v4 := 0
  v5 += 1
  jump select-map-loop
: select-map-start-found
  # Put the player in the start position (direction is fixed)
  i := long player
  v0 := v4
  v1 := v5
  v2 := 1
  save v2
  return
#####################
# Render the map to the screen in pseudo-3D
# (for the actual gameplay)
: render-3d
  column-four
  column-five
  column-three
  column-six
  column-two
  column-seven
  column-one
  jump column-eight

: column-one
  i := long nodes-column-one
  find-sprite
  decompress
  v0 := 0
  jump render-column

: column-two
  i := long nodes-column-two
  find-sprite
  decompress
  v0 := 8
  jump render-column

: column-three
  i := long nodes-column-three
  find-sprite
  decompress
  v0 := 16
  jump render-column

: column-four
  i := long nodes-column-four
  find-sprite
  decompress
  v0 := 24
  jump render-column

: column-five
  i := long nodes-column-five
  find-sprite
  decompress
  v0 := 32
  jump render-column

: column-six
  i := long nodes-column-six
  find-sprite
  decompress
  v0 := 40
  jump render-column

: column-seven
  i := long nodes-column-seven
  find-sprite
  decompress
  v0 := 48
  jump render-column

: column-eight
  i := long nodes-column-eight
  find-sprite
  decompress
  v0 := 56
  # Fall through

: render-column
  i := decompression-buffer
  v2 := 15
  v1 := 1
  sprite v0 v1 15
  i += v2
  v1 := 16
  sprite v0 v1 15
  return

#####################
# This routine walks through the binary tree with nodes and leafs
# Input: i pointing to a node
# Output: i pointing to the image to be rendered
# Destroys: 0v-v6, vF, i

: find-sprite
  # Load this node and find what's there
  load v2
  v5 := v1  # look-ahead destroys these
  v6 := v2
  # Coordinates are stored together in first byte, so unpack
  v3 := v0
  v4 := v0
  v1 := 0x0F
  v4 &= v1
  v3 >>= v3
  v3 >>= v3
  v3 >>= v3
  v3 >>= v3
  look-ahead  # v3 and v4 are inputs, v0 is output
  # Did we encounter a wall?
  v1 := v5
  if v0 == 1 then v1 := v6
  # Is the next step a node or a leaf?
  v2 := v1
  v2 <<= v2
  if vF == 1 then jump find-sprite-done
  # Next is a node, load it and restart
  i := long nodes
  i += v1
  i += v1
  i += v1
  jump find-sprite
: find-sprite-done
  # Next is a leaf, extract the image pointer
  # Each pointer is two bytes, bonus: we rotated out leaf indicator bit
  i := long leafs
  i += v2
  load v1
  # We now have the address of the leaf image in v0 and v1
  return
#####################
# Non-blocking key input check
# Updates the player data on input, checks for collisions
# Destroys v0 - v3
: check-keys
  i := long player
  load v2

  # Rotation
  v0 := OCTO_KEY_A
  if v0 key then jump rotate-left
  v0 := OCTO_KEY_D
  if v0 key then jump rotate-right

  # Movement
  if v2 == 0 then jump going-up
  if v2 == 1 then jump going-right
  if v2 == 2 then jump going-down
  # Else fall through:

: going-left
  v0 := OCTO_KEY_W
  if v0 key then jump move-left
  v0 := OCTO_KEY_S
  if v0 key then jump move-right
  return
: going-up
  v0 := OCTO_KEY_W
  if v0 key then jump move-up
  v0 := OCTO_KEY_S
  if v0 key then jump move-down
  return
: going-right
  v0 := OCTO_KEY_W
  if v0 key then jump move-right
  v0 := OCTO_KEY_S
  if v0 key then jump move-left
  return
: going-down
  v0 := OCTO_KEY_W
  if v0 key then jump move-down
  v0 := OCTO_KEY_S
  if v0 key then jump move-up
  return

: rotate-left
  v0 := 3
  v2 -= 1
  v0 &= v2
  i := long player-orientation
  save v0
  mark-screen-dirty
  jump wait-key-release
: rotate-right
  v0 := 3
  v2 += 1
  v0 &= v2
  i := long player-orientation
  save v0
  mark-screen-dirty
  jump wait-key-release
: move-right
  i := long player
  load v1
  v2 := 15
  v0 += 1
  v0 &= v2
  jump collide-or-save
: move-left
  i := long player
  load v1
  v2 := 15
  v0 -= 1
  v0 &= v2
  jump collide-or-save
: move-up
  i := long player
  load v1
  v2 := 7
  v1 -= 1
  v1 &= v2
  jump collide-or-save
: move-down
  i := long player
  load v1
  v2 := 7
  v1 += 1
  v1 &= v2
  # Fall through

: collide-or-save
  # Backup position
  v4 := v0
  v5 := v1
  # Is there a wall at this position?
  map-get
  if v0 == 1 then jump wait-key-release
  # Otherwise, update position
  v1 := v5
  v3 := v0 # save v0 for check-triggers
  v0 := v4
  i := long player
  save v1
  mark-screen-dirty
  # Fall through

: wait-key-release
  vA := 0
: wait-key-release-loop
  if vA key then jump wait-key-release-loop
  vA += 1
  if vA != 16 then jump wait-key-release-loop
  return

# Blocking "press any key" routine
# (does play music though)
# Returns pressed key in v5
: wait-key-press
  vA := 0
: wait-key-press-loop
  if vA key then return
  vA += 1
  if vA != 16 then jump wait-key-press-loop
  jump wait-key-press
#####################
# Decompress some data to the decompression buffer
# Input: start of compressed data unpacked in v0 and v1
# Output: 30 uncompressed bytes in decompression-buffer
# Destroys: absolutely everything ðŸ˜‚
# Size: 326 bytes including buffers

: decompress
  :alias num-bytes      vC
  :alias source-counter vD
  :alias target-counter vE
  source-counter := 0
	target-counter := 0
  i := decompression-source
  save v1

: decompress-loop
  i := decompress-loop-smc

  # Fix this once we can get rid of the long load
  #v2 := 0xA0
  #v0 |= v2
  save v1
  0xF0 0x00 # i := long ...
: decompress-loop-smc
  0 0
  # i points to start
  i += source-counter
  # i points to current run
	load v0
  vF := 0x7F
  num-bytes := v0
	num-bytes &= vF
  vF := 0x80
  vB := v0
  vB &= vF
  if vB == 0 then jump decompress-repeat
  # Fall through

# Do a plain load of the next `vC` bytes (constant time, thanks to `load vX`)

: decompress-load
  source-counter += num-bytes
  source-counter += 1
  v0 := num-bytes
  v0 -= 1
  v0 <<= v0
  v0 <<= v0
  jump0 decompress-load-bytes

: decompress-load-bytes
  load v0  jump decompress-next
  load v1  jump decompress-next
  load v2  jump decompress-next
  load v3  jump decompress-next
  load v4  jump decompress-next
  load v5  jump decompress-next
  load v6  jump decompress-next
  load v7  jump decompress-next
  load v8  jump decompress-next
  load v9  jump decompress-next
  load vA  jump decompress-next
  load vB  jump decompress-next

# Repeat the next byte `vC` times (time scales as `X + vC`)

: decompress-repeat
  source-counter += 2
  load v0
  v1 := v0
	v0 := 12
  v0 -= num-bytes
  v0 <<= v0
  vF := v1
  jump0 decompress-repeat-bytes

: decompress-repeat-bytes
  vB := vF  vA := vF  v9 := vF
  v8 := vF  v7 := vF  v6 := vF
  v5 := vF  v4 := vF  v3 := vF
  v2 := vF  v1 := vF  v0 := vF
  jump decompress-next

# Save `vC` bytes to the decompression buffer and add `vC` to the total number
# of decompressed bytes (constant time, thanks to `save vX`)

: decompress-next
  i := decompression-buffer
  i += target-counter
  target-counter += num-bytes
  vF := v0
  v0 := num-bytes
  vC := vF          # We don't need vC / num-bytes anymore
  v0 -= 1
  v0 <<= v0         # I want to do `v0 * 6` here, but I can't do it
  v0 <<= v0         # without messing up registers. So we do `v0 * 8`
  v0 <<= v0         # instead and lose a few bytes below :/
  jump0 decompress-save-bytes

: decompress-save-bytes
  v0 := vC  save v0  jump decompress-done  0 0
  v0 := vC  save v1  jump decompress-done  0 0
  v0 := vC  save v2  jump decompress-done  0 0
  v0 := vC  save v3  jump decompress-done  0 0
  v0 := vC  save v4  jump decompress-done  0 0
  v0 := vC  save v5  jump decompress-done  0 0
  v0 := vC  save v6  jump decompress-done  0 0
  v0 := vC  save v7  jump decompress-done  0 0
  v0 := vC  save v8  jump decompress-done  0 0
  v0 := vC  save v9  jump decompress-done  0 0
  v0 := vC  save vA  jump decompress-done  0 0
  v0 := vC  save vB  # Fall through

# If we have the desired number of bytes in the buffer, we're done
# Otherwise, re-unpack source pointer to v0 and v1 and restart

: decompress-done
  if target-counter == 30 then return
  i := decompression-source
  load v1
  jump decompress-loop


: decompression-buffer
	0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0

: decompression-source
  0 0

: hall-0+0+1
  0x8c 0xf 0xc3 0xe0 0xf4 0x26 0x7 0x83 0xe0 0xf2 0xf3 0x7b 0x3 0x8c 0xc0 0xe6 0xf7 0xe7 0xe6 0xc0 0x3 0x7b 0xf3 0xf0 0xe0 0xc3 0x86 0x7 0x76 0xe0 0xe0 0xc3 0xf
  
: hall-0+8+1
  0x8c 0xff 0xff 0xff 0x3f 0xf 0x43 0x60 0x6a 0xb 0x0 0xa6 0x36 0x8c 0x14 0x40 0x6b 0x69 0x40 0x4 0xa6 0xb4 0x21 0xa 0x68 0x48 0x86 0x43 0xf 0x3f 0xff 0xff 0xff
  
: hall-0+16+1
  0x7 0xff 0x8c 0x3f 0xf 0x63 0x28 0x85 0xb0 0x15 0xc 0x62 0xb 0xa8 0x81 0x84 0x28 0x63 0xf 0x3f 0x7 0xff
  
: hall-0+24+1
  0xb 0xff 0x88 0x3f 0x4f 0x53 0x88 0x50 0x23 0x4f 0x3f 0xb 0xff
  
: hall-0+32+1
  0xb 0xff 0x88 0xfc 0xf2 0xca 0x9 0x12 0xc4 0xf2 0xfc 0xb 0xff
  
: hall-0+40+1
  0x7 0xff 0x8c 0xfc 0xf0 0xc6 0x14 0xa1 0xd 0xa8 0x30 0x46 0xd0 0x15 0x81 0x84 0x14 0xc6 0xf0 0xfc 0x7 0xff
  
: hall-0+48+1
  0x8c 0xff 0xff 0xff 0xfc 0xf0 0xc2 0x6 0x56 0xd0 0x0 0x65 0x6c 0x8c 0x28 0x2 0xd6 0x96 0x2 0x20 0x65 0x2d 0x84 0x50 0x16 0x12 0x86 0xc2 0xf0 0xfc 0xff 0xff 0xff
  
: hall-0+56+1
  0x8c 0xf0 0xc3 0x7 0x2f 0x64 0xe0 0xc1 0x7 0x4f 0xcf 0xde 0xc0 0x8c 0x3 0x67 0xef 0xe7 0x67 0x3 0xc0 0xde 0xcf 0xf 0x7 0xc3 0x86 0xe0 0x6e 0x7 0x7 0xc3 0xf0
  

: hall-1+0+1
  0x8c 0xff 0x3 0x40 0xf0 0xf6 0xe7 0x3 0x20 0xfa 0xf3 0xf3 0x63 0x8c 0x0 0x76 0xf7 0xf7 0x66 0x0 0x3 0x63 0xf3 0xf0 0x30 0x3 0x86 0x47 0xf6 0xf0 0x30 0x3 0xff
  
  
: hall-1+56+1
  0x8c 0xff 0xc0 0x2 0xf 0x6f 0xe7 0xc0 0x4 0x5f 0xcf 0xcf 0xc6 0x8c 0x0 0x6e 0xef 0xef 0x66 0x0 0xc0 0xc6 0xcf 0xf 0xc 0xc0 0x86 0xe2 0x6f 0xf 0xc 0xc0 0xff
  

: hall-2+0+1
  0x8c 0xf 0xc7 0xe7 0xf7 0x27 0x7 0x80 0xe2 0xf1 0xf0 0x79 0x3 0x8c 0xc1 0xe0 0xf5 0xe3 0xe0 0xc0 0x2 0x7a 0xf0 0xf2 0xe1 0xc0 0x86 0x7 0x77 0xe7 0xe7 0xc7 0xf
  
: hall-2+8+1
  0x6 0xff 0x8c 0x0 0xb6 0xa7 0x1 0x18 0x96 0xac 0x0 0xd 0xdf 0x86 0x0 0x86 0xd2 0x64 0x1 0xb7 0xa 0x0 0x6 0xff
  
  
: hall-2+48+1
  0x6 0xff 0x8c 0x0 0x6d 0xe5 0x80 0x18 0x69 0x35 0x0 0xb0 0xfb 0x61 0x0 0x86 0x4b 0x26 0x80 0xed 0x50 0x0 0x6 0xff
  
: hall-2+56+1
  0x8c 0xf0 0xe3 0xe7 0xef 0xe4 0xe0 0x1 0x47 0x8f 0xf 0x9e 0xc0 0x8c 0x83 0x7 0xaf 0xc7 0x7 0x3 0x40 0x5e 0xf 0x4f 0x87 0x3 0x86 0xe0 0xee 0xe7 0xe7 0xe3 0xf0
  
  
: hall-3+16+1
  0x7 0xff 0x8c 0x7f 0x7f 0x3 0xac 0xd5 0x0 0x65 0x54 0x0 0x29 0x94 0xc1 0x84 0x34 0x3 0x7f 0x7f 0x7 0xff
  
  
: hall-3+40+1
  0x7 0xff 0x8c 0xfe 0xfe 0xc0 0x35 0xab 0x0 0xa6 0x2a 0x0 0x94 0x29 0x83 0x84 0x2c 0xc0 0xfe 0xfe 0x7 0xff
  
  
: hall-4+16+1
  0x7 0xff 0x8c 0x3f 0xf 0x63 0x29 0x84 0xb1 0x14 0x9 0x60 0x5 0xa8 0x84 0x84 0x29 0x63 0xf 0x3f 0x7 0xff
  
: hall-4+24+1
  0xb 0xff 0x88 0x3f 0xf 0x93 0x8 0x90 0x23 0x8f 0x3f 0xb 0xff
  
: hall-4+32+1
  0xb 0xff 0x88 0xfc 0xf1 0xc8 0x9 0x10 0xc5 0xf0 0xfc 0xb 0xff
  
: hall-4+40+1
  0x7 0xff 0x8c 0xfc 0xf0 0xc6 0x94 0x21 0xd 0xa8 0x10 0x86 0x20 0x95 0x21 0x84 0x94 0xc6 0xf0 0xfc 0x7 0xff
  
  
: hall-5+24+1
  0xb 0xff 0x88 0x3f 0xbf 0x3 0x94 0x20 0x3 0xbf 0x3f 0xb 0xff
  
: hall-5+32+1
  0xb 0xff 0x88 0xfc 0xfd 0xc0 0x9 0x24 0xc0 0xfd 0xfc 0xb 0xff
  
  
: hall-4-6+16+1
  0x7 0xff 0x8c 0x3f 0xf 0x63 0x29 0x84 0xb1 0x14 0xd 0x60 0x9 0xa8 0x80 0x84 0x29 0x63 0xf 0x3f 0x7 0xff
  
: hall-4-6+24+1
  0xb 0xff 0x88 0x3f 0xf 0x97 0x0 0x90 0x27 0x8f 0x3f 0xb 0xff
  
: hall-4-6+32+1
  0xb 0xff 0x88 0xfc 0xf1 0xe8 0x9 0x0 0xe5 0xf0 0xfc 0xb 0xff
  
: hall-4-6+40+1
  0x7 0xff 0x8c 0xfc 0xf0 0xc6 0x94 0x21 0xd 0xa8 0x30 0x86 0x10 0x95 0x1 0x84 0x94 0xc6 0xf0 0xfc 0x7 0xff
  

: wall-1+0+1
  0x8c 0xf 0xc0 0xe0 0xf0 0x23 0x7 0x80 0xe0 0xf0 0xf1 0x79 0x3 0x8c 0xc0 0xe7 0xf7 0xe3 0xe0 0xc0 0x0 0x79 0xf3 0xf0 0xe0 0xc0 0x86 0x7 0x73 0xe3 0xe0 0xc0 0xf
  
: wall-1+8+1
  0x8c 0xff 0x0 0x0 0xa7 0xe7 0xed 0x0 0x10 0xf1 0xe3 0xf7 0xa7 0x8c 0x0 0x97 0xf3 0xe3 0xf1 0x0 0x0 0xe7 0xf1 0xf0 0x0 0x0 0x86 0xe7 0xe3 0xc3 0x81 0x0 0xff
  
: wall-1+16+1
  0x8c 0xff 0x0 0x83 0x8f 0x9f 0x3d 0x0 0x60 0xe3 0xe7 0xe7 0xcf 0x8c 0x0 0xf7 0xf3 0xf3 0xf3 0xf0 0x0 0xf3 0xf9 0xf8 0x18 0x0 0x86 0xe7 0xe3 0xc1 0x80 0x0 0xff
  
: wall-1+24+1
  0x88 0xff 0x0 0x81 0x9f 0xbf 0xbf 0x0 0x1b 0x4 0xfb 0x82 0x0 0xe3 0x4 0xf7 0x8c 0x0 0xf3 0xfb 0xfb 0x3b 0x0 0xf7 0xf7 0xf7 0x37 0x0 0xff
  
: wall-1+32+1
  0x8c 0xff 0x0 0xd8 0xdc 0xdf 0xdf 0x0 0x81 0xf9 0xfd 0xfd 0xfc 0x8c 0x0 0xf3 0xf7 0xf7 0xf7 0xe3 0x0 0xfd 0xfd 0xf9 0x1 0x0 0x86 0xfb 0xf3 0xe3 0x3 0x0 0xff
  
: wall-1+40+1
  0x8c 0xff 0x0 0x41 0x79 0x7d 0x7c 0x0 0x2 0xc3 0xf3 0xf3 0xf3 0x8c 0x0 0xf7 0xf7 0xf7 0xe7 0x7 0x0 0xfb 0xfb 0xe3 0x2 0x0 0x86 0xf3 0xf7 0xc7 0x6 0x0 0xff
  
: wall-1+48+1
  0x8c 0xff 0x0 0x82 0xe3 0xf3 0xe8 0x0 0x0 0xc3 0xe7 0xf7 0xf5 0x8c 0x0 0xf1 0xe3 0xe3 0xc7 0x0 0x0 0xe7 0xcf 0x8f 0xc 0x0 0x86 0xc3 0xe7 0xc5 0x0 0x0 0xff
  
: wall-1+56+1
  0x8c 0xf0 0x3 0x7 0x8f 0xc4 0xe0 0x1 0x7 0xcf 0xcf 0x9e 0x0 0x8c 0x3 0x47 0xcf 0xc7 0x87 0x3 0x0 0x9e 0xcf 0x8f 0x7 0x3 0x86 0x80 0xce 0x87 0x7 0x3 0xf0
  

: wall-1-1+0+1
  0x8c 0xff 0x0 0x40 0xf0 0xf3 0xe7 0x0 0x20 0xf8 0xf1 0xf1 0x63 0x8c 0x0 0x77 0xf7 0xf3 0x60 0x0 0x0 0x61 0xf3 0xf0 0x30 0x0 0x86 0x47 0xf3 0xf3 0x30 0x0 0xff
  
  
: wall-1-1+56+1
  0x8c 0xff 0x0 0x2 0x8f 0xcf 0xe7 0x0 0x4 0xdf 0xcf 0x8f 0x6 0x8c 0x0 0x4e 0xcf 0xcf 0x86 0x0 0x0 0x86 0xcf 0x8f 0xc 0x0 0x86 0x82 0xcf 0x8f 0xc 0x0 0xff
  

: wall-1-2+0+1
  0x8c 0xff 0xf8 0xf0 0xf0 0xf3 0xf7 0x0 0xb0 0x18 0x1 0x71 0x3b 0x8c 0x10 0x7 0xf7 0x73 0x10 0x0 0xb0 0x99 0x3 0x78 0x10 0x0 0x86 0xf7 0xf3 0xf3 0xf0 0xf8 0xff
  
  
: wall-1-2+56+1
  0x8c 0xff 0x1f 0xf 0x8f 0xcf 0xef 0x0 0xd 0xd8 0xc0 0x97 0x1e 0x8c 0x8 0x40 0xcf 0xce 0x88 0x0 0xd 0x99 0xc0 0x9e 0x8 0x0 0x86 0x8f 0xcf 0x8f 0xf 0x1f 0xff
  

: wall-1-3+0+1
  0x8c 0xff 0xf8 0xf0 0xf0 0xf3 0xf7 0xf8 0xf8 0xf8 0x1 0xb1 0x4b 0x8c 0x0 0x27 0xb7 0x3 0x50 0x0 0xd0 0x29 0x3 0xf8 0xf8 0xf8 0x86 0xf7 0xf3 0xf3 0xf0 0xf8 0xff
  
  
: wall-1-3+56+1
  0x8c 0xff 0x1f 0xf 0x8f 0xcf 0xef 0x1f 0x1f 0xdf 0xc0 0x9d 0x12 0x8c 0x1 0x44 0xcd 0xc0 0x8a 0x0 0x3 0x94 0xc0 0x9f 0x1f 0x1f 0x86 0x8f 0xcf 0x8f 0xf 0x1f 0xff
  

: wall-1-4+0+1
  0x8c 0xff 0xf8 0xf0 0xf0 0xf3 0xf7 0xf8 0xf8 0xf8 0xf9 0xf9 0x3 0x8c 0xa0 0x57 0xa7 0x13 0xa0 0x50 0x0 0xf9 0xfb 0xf8 0xf8 0xf8 0x86 0xf7 0xf3 0xf3 0xf0 0xf8 0xff
  
  
: wall-1-4+56+1
  0x8c 0xff 0x1f 0xf 0x8f 0xcf 0xef 0x1f 0x1f 0xdf 0xdf 0x9f 0x0 0x8c 0x5 0x4a 0xc5 0xca 0x85 0xa 0x0 0x9f 0xdf 0x9f 0x1f 0x1f 0x86 0x8f 0xcf 0x8f 0xf 0x1f 0xff
  

: wall-1-5+0+1
  0x8c 0xff 0xf8 0xf0 0xf0 0xf3 0xf7 0xf8 0xf8 0xf8 0xf9 0xf9 0xfb 0x8c 0xf0 0x7 0xa7 0x13 0x0 0xf0 0xf8 0xf9 0xfb 0xf8 0xf8 0xf8 0x86 0xf7 0xf3 0xf3 0xf0 0xf8 0xff
  
  
: wall-1-5+56+1
  0x8c 0xff 0x1f 0xf 0x8f 0xcf 0xef 0x1f 0x1f 0xdf 0xdf 0x9f 0x1f 0x8c 0xf 0x40 0xc5 0xca 0x80 0xf 0x1f 0x9f 0xdf 0x9f 0x1f 0x1f 0x86 0x8f 0xcf 0x8f 0xf 0x1f 0xff
  

: wall-1-6+0+1
  0x8c 0xff 0xf8 0xf0 0xf0 0xf3 0xf7 0xf8 0xf8 0xf8 0xf9 0xf9 0xfb 0x8c 0xf0 0xf7 0x7 0x3 0xf0 0xf0 0xf8 0xf9 0xfb 0xf8 0xf8 0xf8 0x86 0xf7 0xf3 0xf3 0xf0 0xf8 0xff
  
  
: wall-1-6+56+1
  0x8c 0xff 0x1f 0xf 0x8f 0xcf 0xef 0x1f 0x1f 0xdf 0xdf 0x9f 0x1f 0x8c 0xf 0x4f 0xc0 0xc0 0x8f 0xf 0x1f 0x9f 0xdf 0x9f 0x1f 0x1f 0x86 0x8f 0xcf 0x8f 0xf 0x1f 0xff
  

: wall-2-3+0+1
  0x8c 0xf 0xc7 0xe7 0xf7 0x27 0x7 0x83 0xe3 0xf3 0xf0 0x7a 0x5 0x8c 0xc0 0xe4 0xf2 0xe0 0xe6 0xc1 0x2 0x78 0xf0 0xf3 0xe3 0xc3 0x86 0x7 0x77 0xe7 0xe7 0xc7 0xf
  
: wall-2-3+8+1
  0x9 0xff 0x8c 0x0 0xd6 0x2a 0x0 0xb2 0xc9 0x0 0x55 0x8a 0x60 0x96 0x0 0x9 0xff
  
  
: wall-2-3+48+1
  0x9 0xff 0x8c 0x0 0x6b 0x54 0x0 0x4d 0x93 0x0 0xaa 0x51 0x6 0x69 0x0 0x9 0xff
  
: wall-2-3+56+1
  0x8c 0xf0 0xe3 0xe7 0xef 0xe4 0xe0 0xc1 0xc7 0xcf 0xf 0x5e 0xa0 0x8c 0x3 0x27 0x4f 0x7 0x67 0x83 0x40 0x1e 0xf 0xcf 0xc7 0xc3 0x86 0xe0 0xee 0xe7 0xe7 0xe3 0xf0
  

: wall-2-4+0+1
  0x8c 0xf 0xc7 0xe7 0xf7 0x27 0x7 0x83 0xe3 0xf3 0xf3 0x7b 0x0 0x8c 0xc5 0xe2 0xf4 0xe2 0xe5 0xc2 0x0 0x7b 0xf3 0xf3 0xe3 0xc3 0x86 0x7 0x77 0xe7 0xe7 0xc7 0xf
  
: wall-2-4+8+1
  0xa 0xff 0x8a 0xfe 0x0 0x54 0xaa 0x55 0xaa 0x55 0xaa 0x0 0xfe 0xa 0xff
  
  
: wall-2-4+48+1
  0xa 0xff 0x8a 0x7f 0x0 0x2a 0x55 0xaa 0x55 0xaa 0x51 0x0 0x7f 0xa 0xff
  
: wall-2-4+56+1
  0x8c 0xf0 0xe3 0xe7 0xef 0xe4 0xe0 0xc1 0xc7 0xcf 0xcf 0xde 0x0 0x8c 0xa3 0x47 0xaf 0x47 0xa7 0x43 0x0 0xde 0xcf 0xcf 0xc7 0xc3 0x86 0xe0 0xee 0xe7 0xe7 0xe3 0xf0
  

: wall-2-5+0+1
  0x8c 0xf 0xc7 0xe7 0xf7 0x27 0x7 0x83 0xe3 0xf3 0xf3 0x7b 0x7 0x8c 0xc7 0xe0 0xf5 0xe2 0xe0 0xc7 0x7 0x7b 0xf3 0xf3 0xe3 0xc3 0x86 0x7 0x77 0xe7 0xe7 0xc7 0xf
  
: wall-2-5+8+1
  0xa 0xff 0x8a 0xfe 0xfe 0xfe 0x0 0x55 0xaa 0x0 0xfe 0xfe 0xfe 0xa 0xff
  
  
: wall-2-5+48+1
  0xa 0xff 0x8a 0x7f 0x7f 0x7f 0x0 0xaa 0x55 0x0 0x7f 0x7f 0x7f 0xa 0xff
  
: wall-2-5+56+1
  0x8c 0xf0 0xe3 0xe7 0xef 0xe4 0xe0 0xc1 0xc7 0xcf 0xcf 0xde 0xe0 0x8c 0xe3 0x7 0xaf 0x47 0x7 0xe3 0xe0 0xde 0xcf 0xcf 0xc7 0xc3 0x86 0xe0 0xee 0xe7 0xe7 0xe3 0xf0
  

: wall-2-6+0+1
  0x8c 0xf 0xc7 0xe7 0xf7 0x27 0x7 0x83 0xe3 0xf3 0xf3 0x7b 0x7 0x8c 0xc7 0xe7 0xf0 0xe0 0xe7 0xc7 0x7 0x7b 0xf3 0xf3 0xe3 0xc3 0x86 0x7 0x77 0xe7 0xe7 0xc7 0xf
  
: wall-2-6+8+1
  0xa 0xff 0x8b 0xfe 0xfe 0xfe 0xff 0x0 0x0 0xff 0xff 0xfe 0xfe 0xfe 0x9 0xff
  
  
: wall-2-6+48+1
  0xa 0xff 0x8b 0x7f 0x7f 0x7f 0xff 0x0 0x0 0xff 0xff 0x7f 0x7f 0x7f 0x9 0xff
  
: wall-2-6+56+1
  0x8c 0xf0 0xe3 0xe7 0xef 0xe4 0xe0 0xc1 0xc7 0xcf 0xcf 0xde 0xe0 0x8c 0xe3 0xe7 0xf 0x7 0xe7 0xe3 0xe0 0xde 0xcf 0xcf 0xc7 0xc3 0x86 0xe0 0xee 0xe7 0xe7 0xe3 0xf0
  
  
: wall-2+16+1
  0x6 0xff 0x8c 0x0 0x8 0x3d 0x0 0x18 0x79 0xfb 0x0 0x79 0x3c 0xc 0x0 0x86 0xf3 0x60 0x0 0x39 0x8c 0x0 0x6 0xff
  
: wall-2+24+1
  0x6 0xff 0x8c 0x0 0xf9 0xf3 0x0 0x77 0xf7 0xf3 0x0 0xf9 0xfb 0x3b 0x0 0x86 0xde 0xc3 0x0 0xe7 0x70 0x0 0x6 0xff
  
: wall-2+32+1
  0x6 0xff 0x8c 0x0 0xcc 0xef 0x0 0x87 0xf7 0xf6 0x0 0xef 0xef 0x8c 0x0 0x86 0x79 0x61 0x0 0xdf 0xce 0x0 0x6 0xff
  
: wall-2+40+1
  0x6 0xff 0x8c 0x0 0x30 0x9c 0x0 0xc8 0x9e 0x1f 0x0 0x9e 0x3c 0x20 0x0 0x86 0xeb 0x8c 0x0 0x9e 0x38 0x0 0x6 0xff
  
  
: wall-3+16+1
  0x7 0xff 0x8c 0x3f 0xf 0x60 0x22 0x8d 0xb0 0x15 0xa 0x60 0xa 0xa1 0x82 0x84 0x25 0x60 0xf 0x3f 0x7 0xff
  
: wall-3+24+1
  0x9 0xff 0x8c 0x0 0x2a 0x54 0x0 0x1d 0xaa 0x0 0xa2 0x9 0x54 0x3a 0x0 0x9 0xff
  
: wall-3+32+1
  0x9 0xff 0x8c 0x0 0xa2 0x55 0x0 0x51 0xaa 0x0 0x95 0x28 0x44 0xaa 0x0 0x9 0xff
  
: wall-3+40+1
  0x7 0xff 0x8c 0xfc 0xf0 0x6 0xa4 0x71 0xd 0x48 0xe0 0x6 0x40 0x95 0x41 0x84 0xa4 0x6 0xf0 0xfc 0x7 0xff
  
  
: wall-3-3+16+1
  0x7 0xff 0x8c 0x7f 0x7f 0x0 0xa2 0xdd 0x0 0x65 0x5a 0x0 0x2a 0x91 0xc2 0x84 0x35 0x0 0x7f 0x7f 0x7 0xff
  
  
: wall-3-3+40+1
  0x7 0xff 0x8c 0xfe 0xfe 0x0 0xa5 0x7b 0x0 0x46 0xea 0x0 0x44 0x89 0x43 0x84 0xac 0x0 0xfe 0xfe 0x7 0xff
  
  
: wall-3-4+16+1
  0x7 0xff 0x8c 0x7f 0x7f 0x78 0x7a 0x1 0x28 0x51 0x2a 0x50 0xa 0x51 0x2 0x84 0x79 0x78 0x7f 0x7f 0x7 0xff
  
  
: wall-3-4+40+1
  0x7 0xff 0x8c 0xfe 0xfe 0x1e 0x9e 0x40 0xa 0x50 0xca 0x14 0x4a 0x94 0x40 0x84 0x9e 0x1e 0xfe 0xfe 0x7 0xff
  
  
: wall-3-5+16+1
  0x7 0xff 0x8c 0x7f 0x7f 0x78 0x7a 0x79 0x78 0x1 0x52 0x28 0x2 0x79 0x7a 0x84 0x79 0x78 0x7f 0x7f 0x7 0xff
  
  
: wall-3-5+40+1
  0x7 0xff 0x8c 0xfe 0xfe 0x1e 0x9e 0x5e 0x1e 0x40 0xca 0x14 0x40 0x9e 0x5e 0x84 0x9e 0x1e 0xfe 0xfe 0x7 0xff
  
  
: wall-3-6+16+1
  0x7 0xff 0x8c 0x7f 0x7f 0x78 0x7a 0x79 0x78 0x79 0x2 0x0 0x7a 0x79 0x7a 0x84 0x79 0x78 0x7f 0x7f 0x7 0xff
  
  
: wall-3-6+40+1
  0x7 0xff 0x8c 0xfe 0xfe 0x1e 0x9e 0x5e 0x1e 0x5e 0xc0 0x0 0x5e 0x9e 0x5e 0x84 0x9e 0x1e 0xfe 0xfe 0x7 0xff
  
  
: wall-4+16+1
  0x7 0xff 0x8c 0x3f 0xf 0x63 0x28 0x85 0xb0 0x15 0xc 0x62 0xa 0xa8 0x81 0x84 0x28 0x63 0xf 0x3f 0x7 0xff
  
: wall-4+24+1
  0xb 0xff 0x88 0x0 0x55 0x2a 0x55 0xaa 0x45 0xaa 0x0 0xb 0xff
  
: wall-4+32+1
  0xb 0xff 0x88 0x0 0x54 0x8a 0x55 0xaa 0x54 0xaa 0x0 0xb 0xff
  
  
: wall-4-3+16+1
  0x7 0xff 0x8c 0x7f 0x7f 0x3 0xac 0xd5 0x0 0x65 0x54 0x0 0x28 0x94 0xc1 0x84 0x34 0x3 0x7f 0x7f 0x7 0xff
  
  
: wall-4-4+16+1
  0x7 0xff 0x8c 0x3f 0xf 0x63 0x29 0x84 0xb1 0x14 0x9 0x60 0x4 0xa8 0x84 0x84 0x29 0x63 0xf 0x3f 0x7 0xff
  
: wall-4-4+24+1
  0xb 0xff 0x88 0x0 0x55 0xaa 0x55 0xaa 0x45 0xaa 0x0 0xb 0xff
  
  
: wall-4-5+16+1
  0x7 0xff 0x8c 0x3f 0xf 0x63 0x29 0x85 0xb1 0x14 0xd 0x60 0x8 0xa9 0x81 0x84 0x29 0x63 0xf 0x3f 0x7 0xff
  
: wall-4-5+24+1
  0xb 0xff 0x88 0x80 0x95 0x2a 0x15 0xaa 0x5 0xaa 0x80 0xb 0xff
  
: wall-4-5+32+1
  0xb 0xff 0x88 0x1 0x55 0x88 0x55 0xa8 0x54 0xa9 0x1 0xb 0xff
  
: wall-4-5+40+1
  0x7 0xff 0x8c 0xfc 0xf0 0xc6 0x94 0xa1 0x8d 0x28 0x30 0x86 0x10 0x95 0x81 0x84 0x94 0xc6 0xf0 0xfc 0x7 0xff
  
  
: wall-4-6+16+1
  0x7 0xff 0x8c 0x3f 0xf 0x63 0x29 0x85 0xb1 0x15 0xc 0x60 0x9 0xa9 0x81 0x84 0x29 0x63 0xf 0x3f 0x7 0xff
  
: wall-4-6+24+1
  0xb 0xff 0x88 0x80 0x95 0xaa 0x15 0x2a 0x85 0xaa 0x80 0xb 0xff
  
: wall-4-6+32+1
  0xb 0xff 0x88 0x1 0x55 0x89 0x54 0xa8 0x55 0xa9 0x1 0xb 0xff
  
: wall-4-6+40+1
  0x7 0xff 0x8c 0xfc 0xf0 0xc6 0x94 0xa1 0x8d 0xa8 0x30 0x6 0x90 0x95 0x81 0x84 0x94 0xc6 0xf0 0xfc 0x7 0xff
  
  
: wall-5+24+1
  0xb 0xff 0x88 0x3f 0x4f 0x50 0x85 0x52 0x20 0x4f 0x3f 0xb 0xff
  
: wall-5+32+1
  0xb 0xff 0x88 0xfc 0xf2 0xa 0x51 0xa2 0x4 0xf2 0xfc 0xb 0xff
  
  
: wall-5-4+24+1
  0xb 0xff 0x88 0x3f 0xf 0x90 0x5 0x92 0x20 0x8f 0x3f 0xb 0xff
  
: wall-5-4+32+1
  0xb 0xff 0x88 0xfc 0xf1 0x8 0x51 0xa0 0x5 0xf0 0xfc 0xb 0xff
  
  
: wall-5-5+24+1
  0xb 0xff 0x88 0x3f 0xbf 0x0 0x95 0x22 0x0 0xbf 0x3f 0xb 0xff
  
: wall-5-5+32+1
  0xb 0xff 0x88 0xfc 0xfd 0x0 0x51 0xa4 0x0 0xfd 0xfc 0xb 0xff
  
  
: wall-5-6+24+1
  0xb 0xff 0x88 0x3f 0xbf 0x30 0x85 0x2 0x30 0xbf 0x3f 0xb 0xff
  
: wall-5-6+32+1
  0xb 0xff 0x88 0xfc 0xfd 0xc 0x41 0xa0 0xc 0xfd 0xfc 0xb 0xff
  

#####################
# Nodes and leafs - the binary tree that does the decision making
# This needs to be below the 3D image data in order to be able to reference the
# labels in macros.

# Convenience macros and constants

:const numc18nodes 14
:const numc27nodes 6
:const numc36nodes 26
:const numc45nodes 26

:const numc18leafs 14
:const numc27leafs 7
:const numc3leafs 15
:const numc6leafs 12
:const numc4leafs 14
:const numc5leafs 13

:macro coord X Y {
  :byte { ( ( X + 1 ) << 4 ) | Y }
}

:macro c1node X { :byte { X } }
:macro c2node X { :byte { numc18nodes + X } }
:macro c3node X { :byte { numc18nodes + numc27nodes + X } }
:macro c4node X { :byte { numc18nodes + numc27nodes + numc36nodes + X } }
:macro c5node X { :byte { numc18nodes + numc27nodes + numc36nodes + numc45nodes + X } }
:macro c6node X { :byte { numc18nodes + numc27nodes + numc36nodes + ( 2 * numc45nodes ) + X } }
:macro c7node X { :byte { numc18nodes + numc27nodes + ( 2 * numc36nodes ) + ( 2 * numc45nodes ) + X } }
:macro c8node X { :byte { numc18nodes + ( 2 * numc27nodes ) + ( 2 * numc36nodes ) + ( 2 * numc45nodes ) + X } }

:macro c1leaf X { :byte { 0x80 + X } }
:macro c2leaf X { :byte { 0x80 + numc18leafs + X } }
:macro c3leaf X { :byte { 0x80 + numc18leafs + numc27leafs + X } }
:macro c4leaf X { :byte { 0x80 + numc18leafs + numc27leafs + numc3leafs + X } }
:macro c5leaf X { :byte { 0x80 + numc18leafs + numc27leafs + numc3leafs + numc4leafs + X } }
:macro c6leaf X { :byte { 0x80 + numc18leafs + numc27leafs + numc3leafs + numc4leafs + numc5leafs + X } }
:macro c7leaf X { :byte { 0x80 + numc18leafs + numc27leafs + numc3leafs + numc6leafs + numc4leafs + numc5leafs + X } }
:macro c8leaf X { :byte { 0x80 + numc18leafs + ( 2 * numc27leafs ) + numc3leafs + numc6leafs + numc4leafs + numc5leafs + X } }


# Nodes represent decisions: given this point relative to the player, if there
# is a wall there or not, go to this node or leaf. The most significant bit of
# the target entry indicates if its a node (0) or a leaf (1). This
# implementation detail is hidden through the macros.
: nodes

: nodes-column-one
#        X Y  no wall   wall
  coord -1 0  c1node 3  c1node 1   # node 0
  coord  0 1  c1node 2  c1leaf 3   # node 1
  coord -1 1  c1node 9  c1leaf 0   # node 2
  coord  0 1  c1leaf 1  c1node 4   # node 3
  coord -1 1  c1node 5  c1leaf 4   # node 4
  coord -1 2  c1node 6  c1leaf 5   # node 5
  coord -1 3  c1node 7  c1leaf 6   # node 6
  coord -1 4  c1node 8  c1leaf 7   # node 7
  coord -1 5  c1leaf 9  c1leaf 8   # node 8
  coord  0 2  c1leaf 2  c1node 10  # node 9
  coord -1 2  c1node 11 c1leaf 2   # node 10
  coord -1 3  c1node 12 c1leaf 10  # node 11
  coord -1 4  c1node 13 c1leaf 11  # node 12
  coord -1 5  c1leaf 13 c1leaf 12  # node 13

: nodes-column-two
#        X Y  no wall   wall
  coord  0 1  c2node 1  c2leaf 2   # node 0
  coord -1 1  c2node 2  c2leaf 0   # node 1
  coord -1 2  c2node 3  c2leaf 1   # node 2
  coord -1 3  c2node 4  c2leaf 3   # node 3
  coord -1 4  c2node 5  c2leaf 4   # node 4
  coord -1 5  c2leaf 6  c2leaf 5   # node 5

: nodes-column-three  # TODO: reduce duplicates in this tree
#        X Y  no wall    wall
  coord  0 1  c3node 1   c3leaf 3   # node 0
  coord  0 2  c3node 2   c3leaf 4   # node 1
  coord -1 2  c3node 3   c3node 9   # node 2
  coord  0 3  c3node 4   c3node 18  # node 3
  coord  0 4  c3node 5   c3leaf 11  # node 4
  coord  0 5  c3node 6   c3node 8   # node 5
  coord -1 4  c3leaf 0   c3node 7   # node 6
  coord -1 5  c3leaf 1   c3leaf 1   # node 7
  coord -1 4  c3node 25  c3leaf 1   # node 8
  coord  0 3  c3node 10  c3leaf 5   # node 9
  coord -1 3  c3node 11  c3node 13  # node 10
  coord  0 4  c3node 12  c3node 21  # node 11
  coord  0 5  c3node 24  c3leaf 2   # node 12
  coord  0 4  c3node 14  c3leaf 10  # node 13
  coord -1 4  c3node 15  c3node 16  # node 14
  coord  0 5  c3leaf 0   c3node 23  # node 15
  coord  0 5  c3node 17  c3leaf 0   # node 16
  coord -1 5  c3leaf 0   c3leaf 0   # node 17
  coord -1 3  c3node 19  c3leaf 6   # node 18
  coord -1 4  c3node 20  c3leaf 7   # node 19
  coord -1 5  c3leaf 9   c3leaf 8   # node 20
  coord -1 4  c3node 22  c3leaf 12  # node 21
  coord -1 5  c3leaf 14  c3leaf 13  # node 22
  coord -1 5  c3leaf 0   c3leaf 0   # node 23
  coord -1 5  c3leaf 0   c3leaf 2   # node 24
  coord -1 5  c3leaf 1   c3leaf 1   # node 25

: nodes-column-four # TODO: reduce duplicates in this tree
#        X Y  no wall    wall
  coord  0 1  c4node 1   c4leaf 3   # node 0
  coord  0 2  c4node 2   c4leaf 4   # node 1
  coord -1 2  c4node 3   c4node 9   # node 2
  coord  0 3  c4node 4   c4node 18  # node 3
  coord  0 4  c4node 5   c4leaf 6   # node 4
  coord  0 5  c4node 6   c4node 8   # node 5
  coord -1 4  c4leaf 1   c4node 7   # node 6
  coord -1 5  c4leaf 0   c4leaf 0   # node 7
  coord -1 4  c4node 25  c4leaf 10  # node 8
  coord  0 3  c4node 10  c4leaf 5   # node 9
  coord -1 3  c4node 11  c4node 13  # node 10
  coord  0 4  c4node 12  c4node 21  # node 11
  coord  0 5  c4node 24  c4leaf 11  # node 12
  coord  0 4  c4node 14  c4leaf 6   # node 13
  coord -1 4  c4node 15  c4node 16  # node 14
  coord  0 5  c4leaf 1   c4node 23  # node 15
  coord  0 5  c4node 17  c4leaf 10  # node 16
  coord -1 5  c4leaf 0   c4leaf 0   # node 17
  coord -1 3  c4node 19  c4leaf 5   # node 18
  coord -1 4  c4node 20  c4leaf 5   # node 19
  coord -1 5  c4leaf 5   c4leaf 5   # node 20
  coord -1 4  c4node 22  c4leaf 7   # node 21
  coord -1 5  c4leaf 9   c4leaf 8   # node 22
  coord -1 5  c4leaf 13  c4leaf 12  # node 23
  coord -1 5  c4leaf 0   c4leaf 2   # node 24
  coord -1 5  c4leaf 13  c4leaf 12  # node 25

: nodes-column-five # TODO: reduce duplicates in this tree
#        X Y  no wall    wall
  coord  0 1  c5node 1   c5leaf 3   # node 0
  coord  0 2  c5node 2   c5leaf 4   # node 1
  coord  1 2  c5node 3   c5node 9   # node 2
  coord  0 3  c5node 4   c5node 18  # node 3
  coord  0 4  c5node 5   c5leaf 6   # node 4
  coord  0 5  c5node 6   c5node 8   # node 5
  coord  1 4  c5leaf 1   c5node 7   # node 6
  coord  1 5  c5leaf 0   c5leaf 0   # node 7
  coord  1 4  c5node 25  c5leaf 9   # node 8
  coord  0 3  c5node 10  c5leaf 5   # node 9
  coord  1 3  c5node 11  c5node 13  # node 10
  coord  0 4  c5node 12  c5node 21  # node 11
  coord  0 5  c5node 24  c5leaf 10  # node 12
  coord  0 4  c5node 14  c5leaf 6   # node 13
  coord  1 4  c5node 15  c5node 16  # node 14
  coord  0 5  c5leaf 1   c5node 23  # node 15
  coord  0 5  c5node 17  c5leaf 9   # node 16
  coord  1 5  c5leaf 0   c5leaf 0   # node 17
  coord  1 3  c5node 19  c5leaf 5   # node 18
  coord  1 4  c5node 20  c5leaf 5   # node 19
  coord  1 5  c5leaf 5   c5leaf 5   # node 20
  coord  1 4  c5node 22  c5leaf 6   # node 21
  coord  1 5  c5leaf 8   c5leaf 7   # node 22
  coord  1 5  c5leaf 12  c5leaf 11  # node 23
  coord  1 5  c5leaf 0   c5leaf 2   # node 24
  coord  1 5  c5leaf 12  c5leaf 11  # node 25

: nodes-column-six # TODO: reduce duplicates in this tree
#        X Y  no wall    wall
  coord  0 1  c6node 1   c6leaf 3   # node 0
  coord  0 2  c6node 2   c6leaf 4   # node 1
  coord  1 2  c6node 3   c6node 9   # node 2
  coord  0 3  c6node 4   c6node 18  # node 3
  coord  0 4  c6node 5   c6leaf 1   # node 4
  coord  0 5  c6node 6   c6node 8   # node 5
  coord  1 4  c6leaf 0   c6node 7   # node 6
  coord  1 5  c6leaf 0   c6leaf 1   # node 7
  coord  1 4  c6node 25  c6leaf 1   # node 8
  coord  0 3  c6node 10  c6leaf 5   # node 9
  coord  1 3  c6node 11  c6node 13  # node 10
  coord  0 4  c6node 12  c6node 21  # node 11
  coord  0 5  c6node 24  c6leaf 2   # node 12
  coord  0 4  c6node 14  c6leaf 0   # node 13
  coord  1 4  c6node 15  c6node 16  # node 14
  coord  0 5  c6leaf 0   c6node 23  # node 15
  coord  0 5  c6node 17  c6leaf 0   # node 16
  coord  1 5  c6leaf 0   c6leaf 0   # node 17
  coord  1 3  c6node 19  c6leaf 6   # node 18
  coord  1 4  c6node 20  c6leaf 7   # node 19
  coord  1 5  c6leaf 9   c6leaf 8   # node 20
  coord  1 4  c6node 22  c6leaf 0   # node 21
  coord  1 5  c6leaf 11  c6leaf 10  # node 22
  coord  1 5  c6leaf 0   c6leaf 0   # node 23
  coord  1 5  c6leaf 0   c6leaf 2   # node 24
  coord  1 5  c6leaf 1   c6leaf 1   # node 25

: nodes-column-seven
#        X Y  no wall   wall
  coord  0 1  c7node 1  c7leaf 2   # node 0
  coord  1 1  c7node 2  c7leaf 0   # node 1
  coord  1 2  c7node 3  c7leaf 1   # node 2
  coord  1 3  c7node 4  c7leaf 3   # node 3
  coord  1 4  c7node 5  c7leaf 4   # node 4
  coord  1 5  c7leaf 6  c7leaf 5   # node 5

: nodes-column-eight
#        X Y  no wall   wall
  coord  1 0  c8node 3  c8node 1   # node 0
  coord  0 1  c8node 2  c8leaf 3   # node 1
  coord  1 1  c8node 9  c8leaf 0   # node 2
  coord  0 1  c8leaf 1  c8node 4   # node 3
  coord  1 1  c8node 5  c8leaf 4   # node 4
  coord  1 2  c8node 6  c8leaf 5   # node 5
  coord  1 3  c8node 7  c8leaf 6   # node 6
  coord  1 4  c8node 8  c8leaf 7   # node 7
  coord  1 5  c8leaf 9  c8leaf 8   # node 8
  coord  0 2  c8leaf 2  c8node 10  # node 9
  coord  1 2  c8node 11 c8leaf 2   # node 10
  coord  1 3  c8node 12 c8leaf 10  # node 11
  coord  1 4  c8node 13 c8leaf 11  # node 12
  coord  1 5  c8leaf 13 c8leaf 12  # node 13

# Leafs represent images to be rendered. A path of nodes should always lead to
# a leaf. The leafs themselves are pointers to the right images.
: leafs

  # Column 1
  pointer hall-0+0+1      # leaf 0
  pointer hall-1+0+1      # leaf 1
  pointer hall-2+0+1      # leaf 2
  pointer wall-1+0+1      # leaf 3
  pointer wall-1-1+0+1    # leaf 4
  pointer wall-1-2+0+1    # leaf 5
  pointer wall-1-3+0+1    # leaf 6
  pointer wall-1-4+0+1    # leaf 7
  pointer wall-1-5+0+1    # leaf 8
  pointer wall-1-6+0+1    # leaf 9
  pointer wall-2-3+0+1    # leaf 10
  pointer wall-2-4+0+1    # leaf 11
  pointer wall-2-5+0+1    # leaf 12
  pointer wall-2-6+0+1    # leaf 13

  # Column 2
  pointer hall-0+8+1      # leaf 0
  pointer hall-2+8+1      # leaf 1
  pointer wall-1+8+1      # leaf 2
  pointer wall-2-3+8+1    # leaf 3
  pointer wall-2-4+8+1    # leaf 4
  pointer wall-2-5+8+1    # leaf 5
  pointer wall-2-6+8+1    # leaf 6

  # Column 3
  pointer hall-0+16+1     # leaf 0
  pointer hall-3+16+1     # leaf 1
  pointer hall-4+16+1     # leaf 2
  pointer wall-1+16+1     # leaf 3
  pointer wall-2+16+1     # leaf 4
  pointer wall-3+16+1     # leaf 5
  pointer wall-3-3+16+1   # leaf 6
  pointer wall-3-4+16+1   # leaf 7
  pointer wall-3-5+16+1   # leaf 8
  pointer wall-3-6+16+1   # leaf 9
  pointer wall-4+16+1     # leaf 10
  pointer wall-4-3+16+1   # leaf 11
  pointer wall-4-4+16+1   # leaf 12
  pointer wall-4-5+16+1   # leaf 13
  pointer wall-4-6+16+1   # leaf 14

  # Column 4
  pointer hall-0+24+1     # leaf 0
  pointer hall-5+24+1     # leaf 1
  pointer hall-4+24+1     # leaf 2
  pointer wall-1+24+1     # leaf 3
  pointer wall-2+24+1     # leaf 4
  pointer wall-3+24+1     # leaf 5
  pointer wall-4+24+1     # leaf 6
  pointer wall-4-4+24+1   # leaf 7
  pointer wall-4-5+24+1   # leaf 8
  pointer wall-4-6+24+1   # leaf 9
  pointer wall-5+24+1     # leaf 10
  pointer wall-5-4+24+1   # leaf 11
  pointer wall-5-5+24+1   # leaf 12
  pointer wall-5-6+24+1   # leaf 13

  # Column 5
  pointer hall-0+32+1     # leaf 0
  pointer hall-5+32+1     # leaf 1
  pointer hall-4+32+1     # leaf 2
  pointer wall-1+32+1     # leaf 3
  pointer wall-2+32+1     # leaf 4
  pointer wall-3+32+1     # leaf 5
  pointer wall-4+32+1     # leaf 6
  pointer wall-4-5+32+1   # leaf 7
  pointer wall-4-6+32+1   # leaf 8
  pointer wall-5+32+1     # leaf 9
  pointer wall-5-4+32+1   # leaf 10
  pointer wall-5-5+32+1   # leaf 11
  pointer wall-5-6+32+1   # leaf 12

  # Column 6
  pointer hall-0+40+1     # leaf 0
  pointer hall-3+40+1     # leaf 1
  pointer hall-4+40+1     # leaf 2
  pointer wall-1+40+1     # leaf 3
  pointer wall-2+40+1     # leaf 4
  pointer wall-3+40+1     # leaf 5
  pointer wall-3-3+40+1   # leaf 6
  pointer wall-3-4+40+1   # leaf 7
  pointer wall-3-5+40+1   # leaf 8
  pointer wall-3-6+40+1   # leaf 9
  pointer wall-4-5+40+1   # leaf 10
  pointer wall-4-6+40+1   # leaf 11

  # Column 7
  pointer hall-0+48+1     # leaf 0
  pointer hall-2+48+1     # leaf 1
  pointer wall-1+48+1     # leaf 2
  pointer wall-2-3+48+1   # leaf 3
  pointer wall-2-4+48+1   # leaf 4
  pointer wall-2-5+48+1   # leaf 5
  pointer wall-2-6+48+1   # leaf 6

  # Column 8
  pointer hall-0+56+1     # leaf 0
  pointer hall-1+56+1     # leaf 1
  pointer hall-2+56+1     # leaf 2
  pointer wall-1+56+1     # leaf 3
  pointer wall-1-1+56+1   # leaf 4
  pointer wall-1-2+56+1   # leaf 5
  pointer wall-1-3+56+1   # leaf 6
  pointer wall-1-4+56+1   # leaf 7
  pointer wall-1-5+56+1   # leaf 8
  pointer wall-1-6+56+1   # leaf 9
  pointer wall-2-3+56+1   # leaf 10
  pointer wall-2-4+56+1   # leaf 11
  pointer wall-2-5+56+1   # leaf 12
  pointer wall-2-6+56+1   # leaf 13
#####################
# Level definitions
# First nibble is a trigger (or zero for no trigger). Triggers are 1-indexed.
# Second nibble is what it should look like, MSB == 1 for invisible on mini-map

: training1
  0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01
  0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01
  0x01 0x01 0x01 0x01 0x02 0x00 0x00 0x00 0x00 0x00 0x01 0x01 0x01 0x01 0x01 0x01
  0x01 0x01 0x01 0x01 0x01 0x01 0x00 0x01 0x01 0x00 0x01 0x01 0x01 0x01 0x01 0x01
  0x01 0x01 0x01 0x01 0x00 0x00 0x00 0x26 0x00 0x36 0x00 0x13 0x01 0x01 0x01 0x01
  0x01 0x00 0x00 0x00 0x00 0x01 0x01 0x00 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01
  0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x00 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01
  0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01
#####################
# Game state

: player
  0 0 # X, Y
: player-orientation
  0 # orientation

: dirty
  0

: current-map
  pointer training1
# That's all folks!
