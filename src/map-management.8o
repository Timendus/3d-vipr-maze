#####################
# Look at place (v3 - 1, v4) relative to the player
# Return value at that position in v0
: look-ahead
  i := player
  load v2
  if v2 == 0 then jump look-ahead-up
  if v2 == 1 then jump look-ahead-right
  if v2 == 2 then jump look-ahead-down
  # Else fall through
: look-ahead-left
  v0 -= v4
  v1 += 1
  v1 -= v3
  jump map-get
: look-ahead-right
  v0 += v4
  v1 -= 1
  v1 += v3
  jump map-get
: look-ahead-up
  v0 -= 1
  v0 += v3
  v1 -= v4
  jump map-get
: look-ahead-down
  v0 += 1
  v0 -= v3
  v1 += v4
  # Fall through

#####################
# Query the map for the value at a given position
# Input: X in v0, Y in v1 (destructive)
# Output: map value in v0
# Destroys: v0 - v3, i
: map-get
  i := map
  i += v0
  v1 <<= v1
  v1 <<= v1
  v1 <<= v1
  v1 <<= v1
  i += v1
  load v0
  return

#####################
# Read map at X,Y into v0
# Destroys i
: map-read
  i := map
  i += X
  v0 := Y
  v0 <<= v0
  v0 <<= v0
  v0 <<= v0
  v0 <<= v0
  i += v0
  load v0
  return

#####################
# Write v0 into map at X,Y
# Destroys v1, i
: map-write
  i := map
  i += X
  v1 := Y
  v1 <<= v1
  v1 <<= v1
  v1 <<= v1
  v1 <<= v1
  i += v1
  save v0
  return
