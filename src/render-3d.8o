#####################
# Render the map to the screen in pseudo-3D
# (for the actual gameplay)
: render-3d
  column-four
  column-five
  column-three
  column-six
  column-two
  column-seven
  column-one
  # Fall through

: column-eight
  i := nodes-column-eight
  find-sprite
  decompress
  v0 := 56
  jump render-column

: column-one
  i := nodes-column-one
  find-sprite
  decompress
  v0 := 0
  jump render-column

: column-two
  i := nodes-column-two
  find-sprite
  decompress
  v0 := 8
  jump render-column

: column-three
  i := nodes-column-three
  find-sprite
  decompress
  v0 := 16
  jump render-column

: column-four
  i := nodes-column-four
  find-sprite
  decompress
  v0 := 24
  jump render-column

: column-five
  i := nodes-column-five
  find-sprite
  decompress
  v0 := 32
  jump render-column

: column-six
  i := nodes-column-six
  find-sprite
  decompress
  v0 := 40
  jump render-column

: column-seven
  i := nodes-column-seven
  find-sprite
  decompress
  v0 := 48
  # Fall through

: render-column
  i := decompression-buffer
  v2 := 15
  v1 := 1
  sprite v0 v1 15
  i += v2
  v1 := 16
  sprite v0 v1 15
  return

#####################
# This routine walks through the binary tree with nodes and leafs
# Input: i pointing to a node
# Output: i pointing to the image to be rendered
# Destroys: 0v-v6, vF, i

: find-sprite
  # Load this node and find what's there
  load v2
  v5 := v1  # look-ahead destroys these
  v6 := v2
  # Coordinates are stored together in first byte, so unpack
  v3 := v0
  v4 := v0
  v1 := 0x0F
  v4 &= v1
  v3 >>= v3
  v3 >>= v3
  v3 >>= v3
  v3 >>= v3
  look-ahead  # v3 and v4 are inputs, v0 is output
  # Did we encounter a wall?
  v1 := v5
  if v0 == 1 then v1 := v6
  # Is the next step a node or a leaf?
  v2 := v1
  v2 <<= v2
  if vF == 1 then jump find-sprite-done
  # Next is a node, load it and restart
  i := nodes
  i += v1
  i += v1
  i += v1
  jump find-sprite
: find-sprite-done
  # Next is a leaf, extract the image pointer
  # Each pointer is two bytes, bonus: we rotated out leaf indicator bit
  i := leafs
  i += v2
  load v1
  # We now have the address of the leaf image in v0 and v1
  return
