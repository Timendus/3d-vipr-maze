#####################
# Render the map to the screen in pseudo-3D
# (for the actual gameplay)

:const leafoffset 92    # 2 bytes * 46 entries
:const xcoordoffset 2   # Make -1 coord +1 coords

: render-3d
  vA := 0
  vB := 0

  i := nodes-column-one
  find-sprite
  #if VIP
    decompress
  #end
  v3 := 0
  render-column

  #if VIP
    vA := 0
    vB := 0
  #end

  i := nodes-column-two
  find-sprite
  #if VIP
    decompress
  #end
  v3 := 8
  render-column

  #if VIP
    vA := 0
    vB := 0
  #end

  i := nodes-column-three
  find-sprite
  #if VIP
    decompress
  #end
  v3 := 16
  render-column

  #if VIP
    vA := 0
    vB := 0
  #end

  i := nodes-column-four
  find-sprite
  #if VIP
    decompress
  #end
  v3 := 24
  render-column

  vA := leafoffset
  vB := xcoordoffset

  i := nodes-column-four
  find-sprite
  #if VIP
    decompress
  #end
  v3 := 32
  render-column

  #if VIP
    vA := leafoffset
    vB := xcoordoffset
  #end

  i := nodes-column-three
  find-sprite
  #if VIP
    decompress
  #end
  v3 := 40
  render-column

  #if VIP
    vA := leafoffset
    vB := xcoordoffset
  #end

  i := nodes-column-two
  find-sprite
  #if VIP
    decompress
  #end
  v3 := 48
  render-column

  #if VIP
    vA := leafoffset
    vB := xcoordoffset
  #end

  i := nodes-column-one
  find-sprite
  #if VIP
    decompress
  #end
  v3 := 56
  # Fall through

: render-column
  #if SCHIP
    i := render-column-smc
    v2 := 0xA0
    v0 |= v2
    save v1
  : render-column-smc
    0 0
  #else
    i := decompression-buffer
  #end
  v2 := 15
  v1 := 1
  sprite v3 v1 15
  i += v2
  v1 := 16
  sprite v3 v1 15
  return

#####################
# This routine walks through the binary tree with nodes and leafs
# Input:
#  * i pointing to a node
#  * vA as an offset to the leaf (0 or leafoffset)
#  * vB as an offset for the X axis (0 or xcoordoffset)
# Output: address of image to be rendered unpacked in v0 and v1
# Destroys: 0v-v6, vF, i

: find-sprite
  # Load this node and find what's there
  load v2
  v5 := v1  # look-ahead destroys these
  v6 := v2
  # Coordinates are stored together in first byte, so unpack
  v3 := v0
  v4 := v0
  v1 := 0x0F
  v4 &= v1
  v3 >>= v3
  v3 >>= v3
  v3 >>= v3
  v3 >>= v3
  if v3 == 0 then v3 += vB
  look-ahead  # v3 and v4 are inputs, v0 is output
  # Did we encounter a wall?
  v1 := v5
  if v0 == 1 then v1 := v6
  # Is the next step a node or a leaf?
  v2 := v1
  v2 <<= v2
  if vF == 1 then jump find-sprite-done
  # Next is a node, load it and restart
  i := nodes
  i += v1
  i += v1
  i += v1
  jump find-sprite
: find-sprite-done
  # Next is a leaf, extract the image pointer
  # Each pointer is two bytes, bonus: we rotated out leaf indicator bit
  i := leafs
  i += v2
  i += vA
  load v1
  # We now have the address of the leaf image in v0 and v1
  return
