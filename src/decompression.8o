#####################
# Decompress some data to the decompression buffer
# Input: start of compressed data unpacked in v0 and v1
# Output: 60 uncompressed bytes in decompression-buffer
# Destroys: absolutely everything ðŸ˜‚

: decompress
  :alias num-bytes      vC
  :alias source-counter vD
  :alias target-counter vE
  source-counter := 0
	target-counter := 0
  i := decompression-source
  save v1

: decompress-loop
  i := decompress-loop-smc

  # Fix this once we can get rid of the long load
  #v2 := 0xA0
  #v0 |= v2
  save v1
  0xF0 0x00 # i := long ...
: decompress-loop-smc
  0 0
  # i points to start
  i += source-counter
  # i points to current run
	load v0
  vF := 0x7F
  num-bytes := v0
	num-bytes &= vF
  vF := 0x80
  vB := v0
  vB &= vF
  if vB == 0 then jump decompress-repeat
  # Fall through

# Do a plain load of the next `vC` bytes (constant time, thanks to `load vX`)

: decompress-load
  source-counter += num-bytes
  source-counter += 1
  v0 := num-bytes
  v0 -= 1
  v0 <<= v0
  v0 <<= v0
  jump0 decompress-load-bytes

: decompress-load-bytes
  load v0  jump decompress-next
  load v1  jump decompress-next
  load v2  jump decompress-next
  load v3  jump decompress-next
  load v4  jump decompress-next
  load v5  jump decompress-next
  load v6  jump decompress-next
  load v7  jump decompress-next
  load v8  jump decompress-next
  load v9  jump decompress-next
  load vA  jump decompress-next
  load vB  jump decompress-next

# Repeat the next byte `vC` times (time scales as `X + vC`)

: decompress-repeat
  source-counter += 2
  load v0
  v1 := v0
	v0 := 12
  v0 -= num-bytes
  v0 <<= v0
  vF := v1
  jump0 decompress-repeat-bytes

: decompress-repeat-bytes
  vB := vF  vA := vF  v9 := vF
  v8 := vF  v7 := vF  v6 := vF
  v5 := vF  v4 := vF  v3 := vF
  v2 := vF  v1 := vF  v0 := vF
  jump decompress-next

# Save `vC` bytes to the decompression buffer and add `vC` to the total number
# of decompressed bytes (constant time, thanks to `save vX`)

: decompress-next
  i := decompression-buffer
  i += target-counter
  target-counter += num-bytes
  vF := v0
  v0 := num-bytes
  vC := vF          # We don't need vC / num-bytes anymore
  v0 -= 1
  v0 <<= v0         # I want to do `v0 * 6` here, but I can't do it
  v0 <<= v0         # without messing up registers. So we do `v0 * 8`
  v0 <<= v0         # instead and lose a few bytes below :/
  jump0 decompress-save-bytes

: decompress-save-bytes
  v0 := vC  save v0  jump decompress-done  0 0
  v0 := vC  save v1  jump decompress-done  0 0
  v0 := vC  save v2  jump decompress-done  0 0
  v0 := vC  save v3  jump decompress-done  0 0
  v0 := vC  save v4  jump decompress-done  0 0
  v0 := vC  save v5  jump decompress-done  0 0
  v0 := vC  save v6  jump decompress-done  0 0
  v0 := vC  save v7  jump decompress-done  0 0
  v0 := vC  save v8  jump decompress-done  0 0
  v0 := vC  save v9  jump decompress-done  0 0
  v0 := vC  save vA  jump decompress-done  0 0
  v0 := vC  save vB  # Fall through

# If we have the desired number of bytes in the buffer, we're done
# Otherwise, re-unpack source pointer to v0 and v1 and restart

: decompress-done
  if target-counter == 60 then return
  i := decompression-source
  load v1
  jump decompress-loop


: decompression-buffer
	0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0

: decompression-source
  0 0
