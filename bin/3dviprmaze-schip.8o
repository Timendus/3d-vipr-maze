:macro pointer ADDRESS {
  :byte { ADDRESS >> 8 }
  :byte { ADDRESS }
}

:macro unpack-long ADDR {
  :calc hi { 0xFF & ADDR >> 8 }
  :calc lo { 0xFF & ADDR }
  v0 := hi
  v1 := lo
}

:org 0x200

#####################
# 3D Viper Maze
# An Octojam 7 entry
# By Timendus
# https://github.com/Timendus/3d-viper-maze

: main
  clear
  render-3d
  # Mark screen clean
  vE := 0
: main-loop
  check-keys
  # Is the screen dirty?
  if vE == 1 then jump main
  jump main-loop
#####################
# Look at place (v3 - 1, v4) relative to the player
# Return value at that position in v0
: look-ahead
  i := player
  load v2
  if v2 == 0 then jump look-ahead-up
  if v2 == 1 then jump look-ahead-right
  if v2 == 2 then jump look-ahead-down
  # Else fall through
: look-ahead-left
  v0 -= v4
  v1 += 1
  v1 -= v3
  jump map-get
: look-ahead-right
  v0 += v4
  v1 -= 1
  v1 += v3
  jump map-get
: look-ahead-up
  v0 -= 1
  v0 += v3
  v1 -= v4
  jump map-get
: look-ahead-down
  v0 += 1
  v0 -= v3
  v1 += v4
  # Fall through

#####################
# Query the map for the value at a given position
# Input: X in v0, Y in v1 (destructive)
# Output: map value in v0
# Destroys: v0 - v3, i
: map-get
  i := map
  i += v0
  v1 <<= v1
  v1 <<= v1
  v1 <<= v1
  v1 <<= v1
  i += v1
  load v0
  return
#####################
# Render the map to the screen in pseudo-3D
# (for the actual gameplay)

:const leafoffset 92    # 2 bytes * 46 entries
:const xcoordoffset 2   # Make -1 coord +1 coords

: render-3d
  vA := 0
  vB := 0

  i := nodes-column-one
  find-sprite
  v3 := 0
  render-column


  i := nodes-column-two
  find-sprite
  v3 := 8
  render-column


  i := nodes-column-three
  find-sprite
  v3 := 16
  render-column


  i := nodes-column-four
  find-sprite
  v3 := 24
  render-column

  vA := leafoffset
  vB := xcoordoffset

  i := nodes-column-four
  find-sprite
  v3 := 32
  render-column


  i := nodes-column-three
  find-sprite
  v3 := 40
  render-column


  i := nodes-column-two
  find-sprite
  v3 := 48
  render-column


  i := nodes-column-one
  find-sprite
  v3 := 56
  # Fall through

: render-column
    i := render-column-smc
    v2 := 0xA0
    v0 |= v2
    save v1
  : render-column-smc
    0 0
  v2 := 15
  v1 := 1
  sprite v3 v1 15
  i += v2
  v1 := 16
  sprite v3 v1 15
  return

#####################
# This routine walks through the binary tree with nodes and leafs
# Input:
#  * i pointing to a node
#  * vA as an offset to the leaf (0 or leafoffset)
#  * vB as an offset for the X axis (0 or xcoordoffset)
# Output: address of image to be rendered unpacked in v0 and v1
# Destroys: 0v-v6, vF, i

: find-sprite
  # Load this node and find what's there
  load v2
  v5 := v1  # look-ahead destroys these
  v6 := v2
  # Coordinates are stored together in first byte, so unpack
  v3 := v0
  v4 := v0
  v1 := 0x0F
  v4 &= v1
  v3 >>= v3
  v3 >>= v3
  v3 >>= v3
  v3 >>= v3
  if v3 == 0 then v3 += vB
  look-ahead  # v3 and v4 are inputs, v0 is output
  # Did we encounter a wall?
  v1 := v5
  if v0 == 1 then v1 := v6
  # Is the next step a node or a leaf?
  v2 := v1
  v2 <<= v2
  if vF == 1 then jump find-sprite-done
  # Next is a node, load it and restart
  i := nodes
  i += v1
  i += v1
  i += v1
  jump find-sprite
: find-sprite-done
  # Next is a leaf, extract the image pointer
  # Each pointer is two bytes, bonus: we rotated out leaf indicator bit
  i := leafs
  i += v2
  i += vA
  load v1
  # We now have the address of the leaf image in v0 and v1
  return
#####################
# Non-blocking key input check
# Updates the player data on input, checks for collisions
# Destroys: v0 - v5, i
: check-keys
  i := player
  load v2

  # Rotation
  v3 := OCTO_KEY_A
  if v3 key then jump rotate-left
  v3 := OCTO_KEY_D
  if v3 key then jump rotate-right

  # Movement
  v3 := OCTO_KEY_W
  v4 := OCTO_KEY_S
  if v2 == 0 then jump going-up
  if v2 == 1 then jump going-right
  if v2 == 2 then jump going-down
  # Else fall through

: going-left
  if v3 key then jump move-left
  if v4 key then jump move-right
  return
: going-up
  if v3 key then jump move-up
  if v4 key then jump move-down
  return
: going-right
  if v3 key then jump move-right
  if v4 key then jump move-left
  return
: going-down
  if v3 key then jump move-down
  if v4 key then jump move-up
  return

: rotate-left
  v2 -= 1
  jump rotate
: rotate-right
  v2 += 1
: rotate
  v0 := 3
  v0 &= v2
  i := player-orientation
  save v0
  # Mark screen dirty
  vE := 1
  jump wait-key-release

: move-right
  v2 := 15
  v0 += 1
  v0 &= v2
  jump collide-or-save

: move-left
  v2 := 15
  v0 -= 1
  v0 &= v2
  jump collide-or-save

: move-up
  v2 := 7
  v1 -= 1
  v1 &= v2
  jump collide-or-save

: move-down
  v2 := 7
  v1 += 1
  v1 &= v2
  # Fall through

: collide-or-save
  # Backup position
  v4 := v0
  v5 := v1
  # Is there a wall at this position?
  map-get
  if v0 == 1 then jump wait-key-release
  # Otherwise, update position
  v0 := v4
  v1 := v5
  i := player
  save v1
  # Mark screen dirty
  vE := 1
  # Fall through

: wait-key-release
  vA := 0
: wait-key-release-loop
  if vA key then jump wait-key-release-loop
  vA += 1
  if vA != 16 then jump wait-key-release-loop
  return

: hall-0+0+1
    0xf 0xc3 0xe0 0xf4 0x26 0x7 0x83 0xe0 0xf2 0xf3 0x7b 0x3 0xc0 0xe6 0xf7 0xe7 0xe6 0xc0 0x3 0x7b 0xf3 0xf0 0xe0 0xc3 0x7 0x76 0xe0 0xe0 0xc3 0xf 
  
: hall-0+8+1
    0xff 0xff 0xff 0x3f 0xf 0x43 0x60 0x6a 0xb 0x0 0xa6 0x36 0x14 0x40 0x6b 0x69 0x40 0x4 0xa6 0xb4 0x21 0xa 0x68 0x48 0x43 0xf 0x3f 0xff 0xff 0xff 
  
: hall-0+16+1
    0xff 0xff 0xff 0xff 0xff 0xff 0xff 0x3f 0xf 0x63 0x28 0x85 0xb0 0x15 0xc 0x62 0xb 0xa8 0x81 0x28 0x63 0xf 0x3f 0xff 0xff 0xff 0xff 0xff 0xff 0xff 
  
: hall-0+24+1
    0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0x3f 0x4f 0x53 0x88 0x50 0x23 0x4f 0x3f 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 
  
: hall-0+32+1
    0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xfc 0xf2 0xca 0x9 0x12 0xc4 0xf2 0xfc 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 
  
: hall-0+40+1
    0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xfc 0xf0 0xc6 0x14 0xa1 0xd 0xa8 0x30 0x46 0xd0 0x15 0x81 0x14 0xc6 0xf0 0xfc 0xff 0xff 0xff 0xff 0xff 0xff 0xff 
  
: hall-0+48+1
    0xff 0xff 0xff 0xfc 0xf0 0xc2 0x6 0x56 0xd0 0x0 0x65 0x6c 0x28 0x2 0xd6 0x96 0x2 0x20 0x65 0x2d 0x84 0x50 0x16 0x12 0xc2 0xf0 0xfc 0xff 0xff 0xff 
  
: hall-0+56+1
    0xf0 0xc3 0x7 0x2f 0x64 0xe0 0xc1 0x7 0x4f 0xcf 0xde 0xc0 0x3 0x67 0xef 0xe7 0x67 0x3 0xc0 0xde 0xcf 0xf 0x7 0xc3 0xe0 0x6e 0x7 0x7 0xc3 0xf0 
  

: hall-1+0+1
    0xff 0xff 0x0 0x0 0x26 0x6f 0x47 0x0 0x20 0x73 0xf3 0x66 0x0 0x26 0x6f 0xef 0x22 0x0 0xe1 0xf7 0x73 0x10 0x0 0xee 0xe7 0x22 0x0 0x0 0xff 0xff 
  
  
: hall-1+56+1
    0xff 0xff 0x0 0x44 0xe6 0xf6 0xe2 0x0 0x4 0xce 0xcf 0x66 0x0 0x64 0xf6 0xf7 0x44 0x0 0x87 0xef 0xce 0x8 0x0 0x77 0xe7 0xe6 0x44 0x0 0xff 0xff 
  
  
: hall-2+8+1
    0xff 0xff 0xff 0x7f 0x7f 0x7f 0x0 0x36 0x27 0x1 0x18 0x16 0x2c 0x0 0xd 0x5f 0x6 0x0 0x52 0x64 0x1 0x37 0xa 0x0 0x7f 0x7f 0x7f 0xff 0xff 0xff 
  
  
: hall-2+48+1
    0xff 0xff 0xff 0xfe 0xfe 0xfe 0x0 0x6c 0xe4 0x80 0x18 0x68 0x34 0x0 0xb0 0xfa 0x60 0x0 0x4a 0x26 0x80 0xec 0x50 0x0 0xfe 0xfe 0xfe 0xff 0xff 0xff 
  
  
: hall-3+16+1
    0xff 0xff 0xff 0xff 0xff 0xff 0xff 0x7f 0x7f 0x3 0xac 0xd5 0x0 0x65 0x54 0x0 0x29 0x94 0xc1 0x34 0x3 0x7f 0x7f 0xff 0xff 0xff 0xff 0xff 0xff 0xff 
  
  
: hall-3+40+1
    0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xfe 0xfe 0xc0 0x35 0xab 0x0 0xa6 0x2a 0x0 0x94 0x29 0x83 0x2c 0xc0 0xfe 0xfe 0xff 0xff 0xff 0xff 0xff 0xff 0xff 
  
  
: hall-4+16+1
    0xff 0xff 0xff 0xff 0xff 0xff 0xff 0x3f 0xf 0x63 0x29 0x84 0xb1 0x14 0x9 0x60 0x5 0xa8 0x84 0x29 0x63 0xf 0x3f 0xff 0xff 0xff 0xff 0xff 0xff 0xff 
  
: hall-4+24+1
    0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0x3f 0xf 0x93 0x8 0x90 0x23 0x8f 0x3f 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 
  
: hall-4+32+1
    0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xfc 0xf1 0xc8 0x9 0x10 0xc5 0xf0 0xfc 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 
  
: hall-4+40+1
    0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xfc 0xf0 0xc6 0x94 0x21 0xd 0xa8 0x10 0x86 0x20 0x95 0x21 0x94 0xc6 0xf0 0xfc 0xff 0xff 0xff 0xff 0xff 0xff 0xff 
  
  
: hall-5+24+1
    0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0x3f 0xbf 0x3 0x94 0x20 0x3 0xbf 0x3f 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 
  
: hall-5+32+1
    0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xfc 0xfd 0xc0 0x9 0x24 0xc0 0xfd 0xfc 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 
  
  
: wall-1+8+1
    0xff 0xff 0x0 0x6 0x1f 0x3f 0x2e 0x0 0x83 0x8f 0x9f 0x87 0x0 0x18 0x3c 0x7e 0xc 0x0 0xbf 0x9f 0x8f 0x83 0x0 0x32 0x7f 0x1e 0x4 0x0 0xff 0xff 
  
: wall-1+16+1
    0xff 0xff 0x0 0x6 0x1f 0x3f 0x7c 0x0 0x87 0xcf 0xdf 0x1f 0x0 0x3c 0x7e 0x7e 0x3c 0x0 0x3f 0x9f 0x9f 0xe 0x0 0x7c 0x3e 0x1e 0x4 0x0 0xff 0xff 
  
: wall-1+24+1
    0xff 0xff 0x0 0x6 0x1e 0x3f 0x3e 0x0 0xc 0x9e 0xbe 0x1c 0x0 0x79 0xfb 0x7b 0x31 0x0 0x1f 0xbf 0x1f 0x7 0x0 0xfc 0x7e 0x3e 0xe 0x0 0xff 0xff 
  
: wall-1+32+1
    0xff 0xff 0x0 0x20 0x78 0x7c 0x3e 0x0 0x78 0xfd 0x7d 0x7c 0x0 0x8c 0xce 0xdf 0xce 0x0 0x1c 0xbc 0xb9 0x20 0x0 0x7f 0xfe 0x7c 0x70 0x0 0xff 0xff 
  
: wall-1+40+1
    0xff 0xff 0x0 0x60 0xf8 0xfc 0x7c 0x0 0xe0 0xf1 0xf3 0xd8 0x0 0x38 0x7e 0x7c 0x38 0x0 0xcc 0xf9 0xf0 0x60 0x0 0x3e 0x7c 0x7c 0x30 0x0 0xff 0xff 
  
: wall-1+48+1
    0xff 0xff 0x0 0x40 0xf0 0xfc 0x3e 0x0 0xc1 0xf1 0xf9 0xf1 0x0 0x38 0x7e 0x7c 0x38 0x0 0xc5 0xf9 0xf9 0x71 0x0 0x4e 0xfc 0xf8 0x60 0x0 0xff 0xff 
  

: wall-1-2+0+1
    0xff 0xff 0xff 0xff 0xfe 0xfe 0x0 0x6 0xce 0x1 0x0 0xc6 0xcf 0x0 0x1c 0x8e 0x82 0x0 0xee 0x26 0x1 0x5c 0x45 0x0 0xfe 0xfe 0xff 0xff 0xff 0xff 
  
  
: wall-1-2+56+1
    0xff 0xff 0xff 0xff 0x7f 0x7f 0x0 0x60 0x73 0x80 0x0 0x63 0xf3 0x0 0x38 0x71 0x41 0x0 0x77 0x64 0x80 0x3a 0xa2 0x0 0x7f 0x7f 0xff 0xff 0xff 0xff 
  

: wall-1-3+0+1
    0xff 0xff 0xff 0xff 0xff 0xff 0xfe 0xfe 0xfe 0x0 0x55 0xea 0x0 0xa2 0x55 0x0 0x55 0x8a 0x55 0xae 0x0 0xfe 0xfe 0xfe 0xff 0xff 0xff 0xff 0xff 0xff 
  
  
: wall-1-3+56+1
    0xff 0xff 0xff 0xff 0xff 0xff 0x7f 0x7f 0x7f 0x0 0xaa 0x57 0x0 0x45 0xaa 0x0 0xaa 0x51 0xaa 0x75 0x0 0x7f 0x7f 0x7f 0xff 0xff 0xff 0xff 0xff 0xff 
  

: wall-1-4+0+1
    0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xfe 0xfe 0xfe 0xfe 0x0 0x55 0xa2 0x55 0xaa 0x15 0xaa 0x1 0xfe 0xfe 0xfe 0xfe 0xff 0xff 0xff 0xff 0xff 0xff 0xff 
  
  
: wall-1-4+56+1
    0xff 0xff 0xff 0xff 0xff 0xff 0xff 0x7f 0x7f 0x7f 0x7f 0x0 0xaa 0x45 0xaa 0x55 0xa8 0x55 0x80 0x7f 0x7f 0x7f 0x7f 0xff 0xff 0xff 0xff 0xff 0xff 0xff 
  

: wall-1-5+0+1
    0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0x0 0xaa 0x55 0x0 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 
  

: wall-1-6+0+1
    0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0x0 0x0 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 
  
  
: wall-2-3+8+1
    0xff 0xff 0xff 0x7f 0x7f 0x7f 0x7f 0x7f 0x7f 0x0 0x56 0x2a 0x0 0x32 0x49 0x0 0x55 0xa 0x60 0x16 0x0 0x7f 0x7f 0x7f 0x7f 0x7f 0x7f 0xff 0xff 0xff 
  
  
: wall-2-3+48+1
    0xff 0xff 0xff 0xfe 0xfe 0xfe 0xfe 0xfe 0xfe 0x0 0x6a 0x54 0x0 0x4c 0x92 0x0 0xaa 0x50 0x6 0x68 0x0 0xfe 0xfe 0xfe 0xfe 0xfe 0xfe 0xff 0xff 0xff 
  
  
: wall-2-4+8+1
    0xff 0xff 0xff 0x7f 0x7f 0x7f 0x7f 0x7f 0x7f 0x7f 0x7e 0x0 0x54 0x2a 0x55 0x2a 0x55 0x2a 0x0 0x7e 0x7f 0x7f 0x7f 0x7f 0x7f 0x7f 0x7f 0xff 0xff 0xff 
  
  
: wall-2-4+48+1
    0xff 0xff 0xff 0xfe 0xfe 0xfe 0xfe 0xfe 0xfe 0xfe 0x7e 0x0 0x2a 0x54 0xaa 0x54 0xaa 0x50 0x0 0x7e 0xfe 0xfe 0xfe 0xfe 0xfe 0xfe 0xfe 0xff 0xff 0xff 
  
  
: wall-2-5+8+1
    0xff 0xff 0xff 0x7f 0x7f 0x7f 0x7f 0x7f 0x7f 0x7f 0x7e 0x7e 0x7e 0x0 0x55 0x2a 0x0 0x7e 0x7e 0x7e 0x7f 0x7f 0x7f 0x7f 0x7f 0x7f 0x7f 0xff 0xff 0xff 
  
  
: wall-2-5+48+1
    0xff 0xff 0xff 0xfe 0xfe 0xfe 0xfe 0xfe 0xfe 0xfe 0x7e 0x7e 0x7e 0x0 0xaa 0x54 0x0 0x7e 0x7e 0x7e 0xfe 0xfe 0xfe 0xfe 0xfe 0xfe 0xfe 0xff 0xff 0xff 
  
  
: wall-2-6+8+1
    0xff 0xff 0xff 0x7f 0x7f 0x7f 0x7f 0x7f 0x7f 0x7f 0x7e 0x7e 0x7e 0x7f 0x0 0x0 0x7f 0x7f 0x7e 0x7e 0x7e 0x7f 0x7f 0x7f 0x7f 0x7f 0x7f 0xff 0xff 0xff 
  
  
: wall-2-6+48+1
    0xff 0xff 0xff 0xfe 0xfe 0xfe 0xfe 0xfe 0xfe 0xfe 0x7e 0x7e 0x7e 0xfe 0x0 0x0 0xfe 0xfe 0x7e 0x7e 0x7e 0xfe 0xfe 0xfe 0xfe 0xfe 0xfe 0xff 0xff 0xff 
  
  
: wall-2+16+1
    0xff 0xff 0xff 0xff 0xff 0xff 0x0 0x8 0x3d 0x0 0x18 0x79 0xfb 0x0 0x79 0x3c 0xc 0x0 0xf3 0x60 0x0 0x39 0x8c 0x0 0xff 0xff 0xff 0xff 0xff 0xff 
  
: wall-2+24+1
    0xff 0xff 0xff 0xff 0xff 0xff 0x0 0xf9 0xf3 0x0 0x77 0xf7 0xf3 0x0 0xf9 0xfb 0x3b 0x0 0xde 0xc3 0x0 0xe7 0x70 0x0 0xff 0xff 0xff 0xff 0xff 0xff 
  
: wall-2+32+1
    0xff 0xff 0xff 0xff 0xff 0xff 0x0 0xcc 0xef 0x0 0x87 0xf7 0xf6 0x0 0xef 0xef 0x8c 0x0 0x79 0x61 0x0 0xdf 0xce 0x0 0xff 0xff 0xff 0xff 0xff 0xff 
  
: wall-2+40+1
    0xff 0xff 0xff 0xff 0xff 0xff 0x0 0x30 0x9c 0x0 0xc8 0x9e 0x1f 0x0 0x9e 0x3c 0x20 0x0 0xeb 0x8c 0x0 0x9e 0x38 0x0 0xff 0xff 0xff 0xff 0xff 0xff 
  
  
: wall-3+16+1
    0xff 0xff 0xff 0xff 0xff 0xff 0xff 0x3f 0xf 0x60 0x22 0x8d 0xb0 0x15 0xa 0x60 0xa 0xa1 0x82 0x25 0x60 0xf 0x3f 0xff 0xff 0xff 0xff 0xff 0xff 0xff 
  
: wall-3+24+1
    0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0x0 0x2a 0x54 0x0 0x1d 0xaa 0x0 0xa2 0x9 0x54 0x3a 0x0 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 
  
: wall-3+32+1
    0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0x0 0xa2 0x55 0x0 0x51 0xaa 0x0 0x95 0x28 0x44 0xaa 0x0 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 
  
: wall-3+40+1
    0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xfc 0xf0 0x6 0xa4 0x71 0xd 0x48 0xe0 0x6 0x40 0x95 0x41 0xa4 0x6 0xf0 0xfc 0xff 0xff 0xff 0xff 0xff 0xff 0xff 
  
  
: wall-3-3+16+1
    0xff 0xff 0xff 0xff 0xff 0xff 0xff 0x7f 0x7f 0x0 0xa2 0xdd 0x0 0x65 0x5a 0x0 0x2a 0x91 0xc2 0x35 0x0 0x7f 0x7f 0xff 0xff 0xff 0xff 0xff 0xff 0xff 
  
  
: wall-3-3+40+1
    0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xfe 0xfe 0x0 0xa5 0x7b 0x0 0x46 0xea 0x0 0x44 0x89 0x43 0xac 0x0 0xfe 0xfe 0xff 0xff 0xff 0xff 0xff 0xff 0xff 
  
  
: wall-3-4+16+1
    0xff 0xff 0xff 0xff 0xff 0xff 0xff 0x7f 0x7f 0x78 0x7a 0x1 0x28 0x51 0x2a 0x50 0xa 0x51 0x2 0x79 0x78 0x7f 0x7f 0xff 0xff 0xff 0xff 0xff 0xff 0xff 
  
  
: wall-3-4+40+1
    0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xfe 0xfe 0x1e 0x9e 0x40 0xa 0x50 0xca 0x14 0x4a 0x94 0x40 0x9e 0x1e 0xfe 0xfe 0xff 0xff 0xff 0xff 0xff 0xff 0xff 
  
  
: wall-3-5+16+1
    0xff 0xff 0xff 0xff 0xff 0xff 0xff 0x7f 0x7f 0x78 0x7a 0x79 0x78 0x1 0x52 0x28 0x2 0x79 0x7a 0x79 0x78 0x7f 0x7f 0xff 0xff 0xff 0xff 0xff 0xff 0xff 
  
  
: wall-3-5+40+1
    0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xfe 0xfe 0x1e 0x9e 0x5e 0x1e 0x40 0xca 0x14 0x40 0x9e 0x5e 0x9e 0x1e 0xfe 0xfe 0xff 0xff 0xff 0xff 0xff 0xff 0xff 
  
  
: wall-3-6+16+1
    0xff 0xff 0xff 0xff 0xff 0xff 0xff 0x7f 0x7f 0x78 0x7a 0x79 0x78 0x79 0x2 0x0 0x7a 0x79 0x7a 0x79 0x78 0x7f 0x7f 0xff 0xff 0xff 0xff 0xff 0xff 0xff 
  
  
: wall-3-6+40+1
    0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xfe 0xfe 0x1e 0x9e 0x5e 0x1e 0x5e 0xc0 0x0 0x5e 0x9e 0x5e 0x9e 0x1e 0xfe 0xfe 0xff 0xff 0xff 0xff 0xff 0xff 0xff 
  
  
: wall-4+24+1
    0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0x0 0x55 0x2a 0x55 0xaa 0x45 0xaa 0x0 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 
  
: wall-4+32+1
    0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0x0 0x54 0x8a 0x55 0xaa 0x54 0xaa 0x0 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 
  
  
  
: wall-4-5+16+1
    0xff 0xff 0xff 0xff 0xff 0xff 0xff 0x3f 0xf 0x63 0x29 0x85 0xb1 0x14 0xd 0x60 0x8 0xa9 0x81 0x29 0x63 0xf 0x3f 0xff 0xff 0xff 0xff 0xff 0xff 0xff 
  
: wall-4-5+24+1
    0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0x80 0x95 0x2a 0x15 0xaa 0x5 0xaa 0x80 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 
  
: wall-4-5+32+1
    0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0x1 0x55 0x88 0x55 0xa8 0x54 0xa9 0x1 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 
  
: wall-4-5+40+1
    0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xfc 0xf0 0xc6 0x94 0xa1 0x8d 0x28 0x30 0x86 0x10 0x95 0x81 0x94 0xc6 0xf0 0xfc 0xff 0xff 0xff 0xff 0xff 0xff 0xff 
  
  
: wall-4-6+16+1
    0xff 0xff 0xff 0xff 0xff 0xff 0xff 0x3f 0xf 0x63 0x29 0x85 0xb1 0x15 0xc 0x60 0x9 0xa9 0x81 0x29 0x63 0xf 0x3f 0xff 0xff 0xff 0xff 0xff 0xff 0xff 
  
: wall-4-6+24+1
    0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0x80 0x95 0xaa 0x15 0x2a 0x85 0xaa 0x80 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 
  
: wall-4-6+32+1
    0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0x1 0x55 0x89 0x54 0xa8 0x55 0xa9 0x1 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 
  
: wall-4-6+40+1
    0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xfc 0xf0 0xc6 0x94 0xa1 0x8d 0xa8 0x30 0x6 0x90 0x95 0x81 0x94 0xc6 0xf0 0xfc 0xff 0xff 0xff 0xff 0xff 0xff 0xff 
  
  
: wall-5+24+1
    0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0x3f 0x4f 0x50 0x85 0x52 0x20 0x4f 0x3f 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 
  
: wall-5+32+1
    0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xfc 0xf2 0xa 0x51 0xa2 0x4 0xf2 0xfc 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 
  
  
: wall-5-4+24+1
    0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0x3f 0xf 0x90 0x5 0x92 0x20 0x8f 0x3f 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 
  
: wall-5-4+32+1
    0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xfc 0xf1 0x8 0x51 0xa0 0x5 0xf0 0xfc 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 
  
  
: wall-5-5+24+1
    0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0x3f 0xbf 0x0 0x95 0x22 0x0 0xbf 0x3f 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 
  
: wall-5-5+32+1
    0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xfc 0xfd 0x0 0x51 0xa4 0x0 0xfd 0xfc 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 
  
  
: wall-5-6+24+1
    0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0x3f 0xbf 0x30 0x85 0x2 0x30 0xbf 0x3f 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 
  
: wall-5-6+32+1
    0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xfc 0xfd 0xc 0x41 0xa0 0xc 0xfd 0xfc 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 
  
#####################
# Level definitions
# We can only have one for obvious space constraints :(
# 0 = nothing
# 1 = wall

: map
  0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01
  0x01 0x01 0x00 0x00 0x00 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x00 0x00 0x00 0x01
  0x01 0x00 0x00 0x01 0x00 0x00 0x00 0x00 0x00 0x00 0x01 0x00 0x00 0x01 0x00 0x01
  0x01 0x00 0x01 0x01 0x01 0x01 0x00 0x01 0x01 0x00 0x01 0x00 0x01 0x00 0x00 0x01
  0x01 0x00 0x01 0x01 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x01 0x00 0x01 0x01
  0x01 0x00 0x00 0x00 0x00 0x01 0x01 0x00 0x01 0x01 0x01 0x00 0x00 0x00 0x00 0x01
  0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x00 0x01 0x01 0x01 0x01 0x00 0x01 0x01 0x01
  0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01
#####################
# Game state

: player
  0x4 0x2 # X, Y
: player-orientation
  0x1 # orientation
#####################
# Nodes and leafs - the binary tree that does the decision making
# This needs to be below the 3D image data in order to be able to reference the
# labels in macros.

# Convenience macros and constants

:const numc18nodes 14
:const numc27nodes 6
:const numc36nodes 12
:const numc45nodes 20
#      --------------- +
#      104 nodes

:const numc18leafs 14
:const numc27leafs 7
:const numc36leafs 12
:const numc45leafs 13
#      --------------- +
#      92 leafs

:macro coord X Y {
  :byte { ( ( X + 1 ) << 4 ) | Y }
}

:macro c1node X { :byte { X } }
:macro c2node X { :byte { numc18nodes + X } }
:macro c3node X { :byte { numc18nodes + numc27nodes + X } }
:macro c4node X { :byte { numc18nodes + numc27nodes + numc36nodes + X } }

:macro c1leaf X { :byte { 0x80 + X } }
:macro c2leaf X { :byte { 0x80 + numc18leafs + X } }
:macro c3leaf X { :byte { 0x80 + numc18leafs + numc27leafs + X } }
:macro c4leaf X { :byte { 0x80 + numc18leafs + numc27leafs + numc36leafs + X } }
:macro c5leaf X { :byte { 0x80 + numc18leafs + numc27leafs + numc36leafs + numc45leafs + X } }
:macro c6leaf X { :byte { 0x80 + numc18leafs + numc27leafs + numc36leafs + numc45leafs + numc45leafs + X } }
:macro c7leaf X { :byte { 0x80 + numc18leafs + numc27leafs + numc36leafs + numc36leafs + numc45leafs + numc45leafs + X } }
:macro c8leaf X { :byte { 0x80 + numc18leafs + ( 2 * numc27leafs ) + numc36leafs + numc36leafs + numc45leafs + numc45leafs + X } }


# Nodes represent decisions: given this point relative to the player, if there
# is a wall there or not, go to this node or leaf. The most significant bit of
# the target entry indicates if its a node (0) or a leaf (1). This
# implementation detail is hidden through the macros.
: nodes

: nodes-column-one # and eight
#        X Y  no wall    wall
  coord -1 0  c1node 3   c1node 1   # node 0
  coord  0 1  c1node 2   c1leaf 3   # node 1
  coord -1 1  c1node 9   c1leaf 0   # node 2
  coord  0 1  c1leaf 1   c1node 4   # node 3
  coord -1 1  c1node 5   c1leaf 4   # node 4
  coord -1 2  c1node 6   c1leaf 5   # node 5
  coord -1 3  c1node 7   c1leaf 6   # node 6
  coord -1 4  c1node 8   c1leaf 7   # node 7
  coord -1 5  c1leaf 9   c1leaf 8   # node 8
  coord  0 2  c1leaf 2   c1node 10  # node 9
  coord -1 2  c1node 11  c1leaf 2   # node 10
  coord -1 3  c1node 12  c1leaf 10  # node 11
  coord -1 4  c1node 13  c1leaf 11  # node 12
  coord -1 5  c1leaf 13  c1leaf 12  # node 13

: nodes-column-two # and seven
#        X Y  no wall    wall
  coord  0 1  c2node 1   c2leaf 2   # node 0
  coord -1 1  c2node 2   c2leaf 0   # node 1
  coord -1 2  c2node 3   c2leaf 1   # node 2
  coord -1 3  c2node 4   c2leaf 3   # node 3
  coord -1 4  c2node 5   c2leaf 4   # node 4
  coord -1 5  c2leaf 6   c2leaf 5   # node 5

: nodes-column-three # and six
#        X Y  no wall    wall
  coord  0 1  c3node 1   c3leaf 3   # node 0
  coord  0 2  c3node 2   c3leaf 4   # node 1
  coord -1 2  c3node 3   c3node 4   # node 2
  coord  0 3  c3leaf 1   c3node 7   # node 3
  coord  0 3  c3node 5   c3leaf 5   # node 4
  coord -1 3  c3node 6   c3leaf 0   # node 5
  coord  0 4  c3leaf 2   c3node 10  # node 6
  coord -1 3  c3node 8   c3leaf 6   # node 7
  coord -1 4  c3node 9   c3leaf 7   # node 8
  coord -1 5  c3leaf 9   c3leaf 8   # node 9
  coord -1 4  c3node 11  c3leaf 2   # node 10
  coord -1 5  c3leaf 11  c3leaf 10  # node 11

: nodes-column-four # and five
#        X Y  no wall    wall
  coord  0 1  c4node 1   c4leaf 3   # node 0
  coord  0 2  c4node 2   c4leaf 4   # node 1
  coord -1 2  c4node 3   c4node 8   # node 2
  coord  0 3  c4node 4   c4leaf 5   # node 3
  coord  0 4  c4node 5   c4leaf 6   # node 4
  coord  0 5  c4node 6   c4node 7   # node 5
  coord -1 4  c4leaf 1   c4leaf 0   # node 6
  coord -1 4  c4node 18  c4leaf 9   # node 7
  coord  0 3  c4node 9   c4leaf 5   # node 8
  coord -1 3  c4node 10  c4node 12  # node 9
  coord  0 4  c4node 11  c4node 16  # node 10
  coord  0 5  c4node 19  c4leaf 10  # node 11
  coord  0 4  c4node 13  c4leaf 6   # node 12
  coord -1 4  c4node 14  c4node 15  # node 13
  coord  0 5  c4leaf 1   c4node 18  # node 14
  coord  0 5  c4leaf 0   c4leaf 9   # node 15
  coord -1 4  c4node 17  c4leaf 6   # node 16
  coord -1 5  c4leaf 8   c4leaf 7   # node 17
  coord -1 5  c4leaf 12  c4leaf 11  # node 18
  coord -1 5  c4leaf 0   c4leaf 2   # node 19

# Leafs represent images to be rendered. A path of nodes should always lead to
# a leaf. The leafs themselves are pointers to the right images.
: leafs

  # Column 1
  pointer hall-0+0+1      # leaf 0
  pointer hall-1+0+1      # leaf 1
  pointer hall-0+0+1      # leaf 2
  pointer hall-0+0+1      # leaf 3
  pointer hall-1+0+1      # leaf 4
  pointer wall-1-2+0+1    # leaf 5
  pointer wall-1-3+0+1    # leaf 6
  pointer wall-1-4+0+1    # leaf 7
  pointer wall-1-5+0+1    # leaf 8
  pointer wall-1-6+0+1    # leaf 9
  pointer hall-0+0+1      # leaf 10
  pointer hall-0+0+1      # leaf 11
  pointer hall-0+0+1      # leaf 12
  pointer hall-0+0+1      # leaf 13

  # Column 2
  pointer hall-0+8+1      # leaf 0
  pointer hall-2+8+1      # leaf 1
  pointer wall-1+8+1      # leaf 2
  pointer wall-2-3+8+1    # leaf 3
  pointer wall-2-4+8+1    # leaf 4
  pointer wall-2-5+8+1    # leaf 5
  pointer wall-2-6+8+1    # leaf 6

  # Column 3
  pointer hall-0+16+1     # leaf 0
  pointer hall-3+16+1     # leaf 1
  pointer hall-4+16+1     # leaf 2
  pointer wall-1+16+1     # leaf 3
  pointer wall-2+16+1     # leaf 4
  pointer wall-3+16+1     # leaf 5
  pointer wall-3-3+16+1   # leaf 6
  pointer wall-3-4+16+1   # leaf 7
  pointer wall-3-5+16+1   # leaf 8
  pointer wall-3-6+16+1   # leaf 9
  pointer wall-4-5+16+1   # leaf 10
  pointer wall-4-6+16+1   # leaf 11

  # Column 4
  pointer hall-0+24+1     # leaf 0
  pointer hall-5+24+1     # leaf 1
  pointer hall-4+24+1     # leaf 2
  pointer wall-1+24+1     # leaf 3
  pointer wall-2+24+1     # leaf 4
  pointer wall-3+24+1     # leaf 5
  pointer wall-4+24+1     # leaf 6
  pointer wall-4-5+24+1   # leaf 7
  pointer wall-4-6+24+1   # leaf 8
  pointer wall-5+24+1     # leaf 9
  pointer wall-5-4+24+1   # leaf 10
  pointer wall-5-5+24+1   # leaf 11
  pointer wall-5-6+24+1   # leaf 12

  # Column 8
  pointer hall-0+56+1     # leaf 0
  pointer hall-1+56+1     # leaf 1
  pointer hall-0+56+1     # leaf 2
  pointer hall-0+56+1     # leaf 3
  pointer hall-1+56+1     # leaf 4
  pointer wall-1-2+56+1   # leaf 5
  pointer wall-1-3+56+1   # leaf 6
  pointer wall-1-4+56+1   # leaf 7
  pointer wall-1-5+0+1    # leaf 8
  pointer wall-1-6+0+1    # leaf 9
  pointer hall-0+56+1     # leaf 10
  pointer hall-0+56+1     # leaf 11
  pointer hall-0+56+1     # leaf 12
  pointer hall-0+56+1     # leaf 13

  # Column 7
  pointer hall-0+48+1     # leaf 0
  pointer hall-2+48+1     # leaf 1
  pointer wall-1+48+1     # leaf 2
  pointer wall-2-3+48+1   # leaf 3
  pointer wall-2-4+48+1   # leaf 4
  pointer wall-2-5+48+1   # leaf 5
  pointer wall-2-6+48+1   # leaf 6

  # Column 6
  pointer hall-0+40+1     # leaf 0
  pointer hall-3+40+1     # leaf 1
  pointer hall-4+40+1     # leaf 2
  pointer wall-1+40+1     # leaf 3
  pointer wall-2+40+1     # leaf 4
  pointer wall-3+40+1     # leaf 5
  pointer wall-3-3+40+1   # leaf 6
  pointer wall-3-4+40+1   # leaf 7
  pointer wall-3-5+40+1   # leaf 8
  pointer wall-3-6+40+1   # leaf 9
  pointer wall-4-5+40+1   # leaf 10
  pointer wall-4-6+40+1   # leaf 11

  # Column 5
  pointer hall-0+32+1     # leaf 0
  pointer hall-5+32+1     # leaf 1
  pointer hall-4+32+1     # leaf 2
  pointer wall-1+32+1     # leaf 3
  pointer wall-2+32+1     # leaf 4
  pointer wall-3+32+1     # leaf 5
  pointer wall-4+32+1     # leaf 6
  pointer wall-4-5+32+1   # leaf 7
  pointer wall-4-6+32+1   # leaf 8
  pointer wall-5+32+1     # leaf 9
  pointer wall-5-4+32+1   # leaf 10
  pointer wall-5-5+32+1   # leaf 11
  pointer wall-5-6+32+1   # leaf 12
# That's all folks!
