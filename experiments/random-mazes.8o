: main
  clear
  randomize-map
  clear
  render-map
	loop
  again


#####################
# Level definitions
# We can only have one for obvious space constraints :(
# 0 = nothing
# 1 = wall

: map
  0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01
  0x01 0x01 0x00 0x00 0x00 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x00 0x00 0x00 0x01
  0x01 0x00 0x00 0x01 0x00 0x00 0x00 0x00 0x00 0x00 0x01 0x00 0x00 0x01 0x00 0x01
  0x01 0x00 0x01 0x01 0x01 0x01 0x00 0x01 0x01 0x00 0x01 0x00 0x01 0x00 0x00 0x01
  0x01 0x00 0x01 0x01 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x01 0x00 0x01 0x01
  0x01 0x00 0x00 0x00 0x00 0x01 0x01 0x00 0x01 0x01 0x01 0x00 0x00 0x00 0x00 0x01
  0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x00 0x01 0x01 0x01 0x01 0x00 0x01 0x01 0x01
  0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01
  0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01

: player
  0 0 0

:alias X vA
:alias Y vB
:alias FRONTIER vC
:alias RUN vD

: randomize-map
  :monitor map 144
  # Clear the map (make it all walls)
  i := map
  v1 := 0
  v0 := 1
: rm-clear-loop
  save v0
	#if SCHIP
  #	i += v0
	#end
  v1 += 1
  if v1 < 128 then jump rm-clear-loop

  # Choose a random starting position
	v0 := 7
	rand
	X := v0
	X <<= X
	X += 1

	v0 := 3
	rand
	Y := v0
	Y <<= Y
	Y += 1

  v0 := 4
  rand
  v2 := v0
  v0 := X
  v1 := Y
  i := player
  save v2

  RUN := 0
  FRONTIER := 0

: rm-mark-spot
  # Mark spot as new hallway
  v0 := 0
  map-write

  # Mark the new frontier
  if Y > 2 begin # Valid coordinate?
    Y -= 2
    map-read
    if v0 != 0 begin
      if v0 == 1 then FRONTIER += 1 # Is this a new frontier?
      v1 := 0x80
      v0 |= v1
      map-write
    end
    Y += 2
  end
  if X > 2 begin
    X -= 2
    map-read
    if v0 != 0 begin
      if v0 == 1 then FRONTIER += 1 # Is this a new frontier?
      v1 := 0x40
      v0 |= v1
      map-write
    end
    X += 2
  end
  if X < 13 begin
    X += 2
    map-read
    if v0 != 0 begin
      if v0 == 1 then FRONTIER += 1 # Is this a new frontier?
      v1 := 0x20
      v0 |= v1
      map-write
    end
    X -= 2
  end
  if Y < 6 begin
    Y += 2
    map-read
    if v0 != 0 begin
      if v0 == 1 then FRONTIER += 1 # Is this a new frontier?
      v1 := 0x10
      v0 |= v1
      map-write
    end
    Y -= 2
  end

  # Are we done yet?
  if FRONTIER == 0 begin
    v0 := 7 # Mark the exit
    map-write
    return
  end

  # Show progress
  RUN += 1
  v0 := 0
  i := hex v0
  v0 := RUN
  v0 <<= v0
  v0 += 2
  v1 := 20
  sprite v0 v1 5

  clear
  render-map

  # Pick a new frontier to expand
  v0 := FRONTIER
  rand
  v4 := v0
  X := 1
  Y := 1
  v2 := 0xF0
  loop
    map-read
    v5 := v0
    v0 &= v2
    if v0 != 0 begin
      if v4 == 0 begin
        FRONTIER -= 1

        # In how many directions can this frontier connect?
        #v4 := 0
        loop
          v0 <<= v0
          if vF == 1 then v4 += 1
        if v0 != 0 then again
        # v4 = number of possible directions

        # Pick a random direction to connect to
        v0 := v4
        rand # destroys v1, v2, v3
        v4 := 0x80
        v1 := v5

        loop
          v1 <<= v1
          if vF == 1 begin
            if v0 == 0 then jump rm-found-direction
            v0 -= 1
          end
          v4 >>= v4
        again
: rm-found-direction
        # v4 = chosen direction

        v0 := 0
        if v4 == 0x80 begin
          Y += 1
          map-write
          Y -= 1
        end
        if v4 == 0x40 begin
          X += 1
          map-write
          X -= 1
        end
        if v4 == 0x20 begin
          X -= 1
          map-write
          X += 1
        end
        if v4 == 0x10 begin
          Y -= 1
          map-write
          Y += 1
        end
        jump rm-mark-spot
      end
      v4 -= 1
    end
    X += 1
    if X == 16 begin
      X := 0
      Y += 1
      # if Y == 7 then return # This would be an error state
    end
  again

#####################
# Get a random number
# Input: v0 is upper bound (exclusive)
# Output: v0 is random number
# Destroys: v1, v2, v3
: rand
	# Create bitmask
	v2 := 0
	v3 := v0
: rand-mask
	v3 >>= v3
	v2 <<= v2
	v2 += 1
	if v3 != 0 then jump rand-mask
  loop
  	v1 := random 255
  	v1 &= v2
  	if v1 < v0 begin
      v0 := v1
  	  return
    end
  again

#####################
# Read map at X,Y into v0
# Destroys i
: map-read
  i := map
  i += X
  v0 := Y
  v0 <<= v0
  v0 <<= v0
  v0 <<= v0
  v0 <<= v0
  i += v0
  load v0
  return

#####################
# Write v0 into map at X,Y
# Destroys v1, i
: map-write
  i := map
  i += X
  v1 := Y
  v1 <<= v1
  v1 <<= v1
  v1 <<= v1
  v1 <<= v1
  i += v1
  save v0
  return



# Blocking "press any key" routine
# Returns pressed key in v5
: wait-key-press
  vA := 0
: wait-key-press-loop
  if vA key then jump wait-key-release
  vA += 1
  if vA != 16 then jump wait-key-press-loop
  jump wait-key-press

: wait-key-release
  vA := 0
: wait-key-release-loop
  if vA key then jump wait-key-release-loop
  vA += 1
  if vA != 16 then jump wait-key-release-loop
  return





: render-map
  :alias X v6
  :alias Y v7
  X := 0
  Y := 0
: render-map-loop
  # Look up value at X,Y
  v0 := X
  v1 := Y
  map-get
  # Don't show tile if its hidden
  v1 := 0b00001000
  v2 := 0b00000111
  v1 &= v0
  v2 &= v0
  if v1 == 0b00001000 begin
    # Hidden normal stuff looks like hallway
    v0 := 0x00
    # Hidden hallways look like FRONTIER
    if v2 == 0x00 then v0 := 0x01
    # Hidden coins look like FRONTIER
    if v2 == 0x06 then v0 := 0x01
  end
  # Mask out three relevant bits
  v1 := 0b00000111
  v0 &= v1
  # Get pointer to right sprite
  # Sprites are 8 bytes, so sprite = tiles + map value * 4
  i := long top-down-tiles
  v0 <<= v0
  v0 <<= v0
  v0 <<= v0
  i += v0
  # Get coordinates in display space (x4)
  v4 := X
  v4 <<= v4
  v4 <<= v4
  v5 := Y
  v5 <<= v5
  v5 += Y
  # Render
  sprite v4 v5 3
  X += 1
  if X < 16 then jump render-map-loop
  # Next row
  X := 0
  Y += 1
  if Y < 8 then jump render-map-loop
  # Done
  return

#####################
# Query the map for the value at a given position
# Input: X in v0, Y in v1 (destructive)
# Output: map value in v0
# Destroys: v0 - v3, i
: map-get
  i := map
  i += v0
  v1 <<= v1
  v1 <<= v1
  v1 <<= v1
  v1 <<= v1
  i += v1
  load v0
  return


#####################
# Tiles for the mini-map

: top-down-tiles

# empty
  0b11110000
  0b11110000
  0b11110000
  0b11110000

  0b00000000
  0b00000000
  0b00000000
  0b00000000

# wall
  0b00000000
  0b00000000
  0b00000000
  0b00000000

  0b01010000
  0b10100000
  0b01010000
  0b10100000

# player starting position
  0b00000000
  0b00000000
  0b00000000
  0b01100000

  0b00000000
  0b01100000
  0b01100000
  0b00000000

# finish
  0b00000000
  0b00010000
  0b00010000
  0b00000000

  0b01100000
  0b11110000
  0b10010000
  0b10010000

# button
  0b00000000
  0b10000000
  0b10000000
  0b00000000

  0b00000000
  0b01100000
  0b01100000
  0b00000000

# snake
  0b01100000
  0b00000000
  0b00000000
  0b00000000

  0b00100000
  0b01000000
  0b00100000
  0b01000000

# Coins are not visible on the map
  0b11110000
  0b10110000
  0b11010000
  0b11110000

  0b00000000
  0b00000000
  0b00000000
  0b00000000

# Coins are not visible on the map
  0b11110000
  0b11010000
  0b10110000
  0b11110000

  0b00000000
  0b00000000
  0b00000000
  0b00000000
