

: hall-0+0+1
  0xf 0xc3 0xe0 0xf4 0x26 0x7 0x83 0xe0 0xf2 0xf3 0x7b 0x3 0xc0 0xe6 0xf7 0xe7 0xe6 0xc0 0x3 0x7b 0xf3 0xf0 0xe0 0xc3 0x7 0x76 0xe0 0xe0 0xc3 0xf 0xff 0xff 0xff 0x3f 0xf 0x43 0x60 0x6a 0xb 0x0 0xa6 0x36 0x14 0x40 0x6b 0x69 0x40 0x4 0xa6 0xb4 0x21 0xa 0x68 0x48 0x43 0xf 0x3f 0xff 0xff 0xff
: hall-0+16+1
  0xff 0xff 0xff 0xff 0xff 0xff 0xff 0x3f 0xf 0x63 0x28 0x85 0xb0 0x15 0xc 0x62 0xb 0xa8 0x81 0x28 0x63 0xf 0x3f 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0x3f 0x4f 0x53 0x88 0x50 0x23 0x4f 0x3f 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff

: hall-0+32+1
0x7 0xff 0x8c 0xfc 0xf0 0xc6 0x14 0xa1 0xd 0xa8 0x30 0x46 0xd0 0x15 0x81 0x84 0x14 0xc6 0xf0 0xfc 0x7 0xff
0xb 0xff 0x88 0xfc 0xf2 0xca 0x9 0x12 0xc4 0xf2 0xfc 0xb 0xff

: hall-0+48+1
0x8c 0xf0 0xc3 0x7 0x2f 0x64 0xe0 0xc1 0x7 0x4f 0xcf 0xde 0xc0 0x8c 0x3 0x67 0xef 0xe7 0x67 0x3 0xc0 0xde 0xcf 0xf 0x7 0xc3 0x86 0xe0 0x6e 0x7 0x7 0xc3 0xf0
0x8c 0xff 0xff 0xff 0xfc 0xf0 0xc2 0x6 0x56 0xd0 0x0 0x65 0x6c 0x8c 0x28 0x2 0xd6 0x96 0x2 0x20 0x65 0x2d 0x84 0x50 0x16 0x12 0x86 0xc2 0xf0 0xfc 0xff 0xff 0xff

: decompression-buffer
	0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0

: decompression-source
  0 0

: main
	clear
	:unpack 0 hall-0+16+1
	copy

	v0 := 16
	v2 := 15
	i := decompression-buffer
	render
	v0 := 24
	render

	:unpack 0 hall-0+32+1
	decompress

	v0 := 40
	v2 := 15
	i := decompression-buffer
	render
	v0 := 32
	render

	:unpack 0 hall-0+0+1
	copy

	v0 := 0
	v2 := 15
	i := decompression-buffer
	render
	v0 := 8
	render

	:unpack 0 hall-0+48+1
	decompress

	v0 := 56
	v2 := 15
	i := decompression-buffer
	render
	v0 := 48
	render

	jump main

: render
  v1 := 1
  sprite v0 v1 15
  i += v2
  v1 := 16
  sprite v0 v1 15
  i += v2
  return

#############################
# Copy 60 bytes from given address to decompression-buffer
# Input: Address unpacked in v0 and v1
# Destroys: Everything except vD

: copy
  vE := 0
  i := copy-addr
  save v1
  loop
    v2 := 0xA0
    v0 |= v2
    i := copy-smc
    save v1
  : copy-smc
    0 0
    i += vE
    load vC
    i := decompression-buffer
    i += vE
    save vC
    vE += 12
    if vE == 60 then return
    i := copy-addr
    load v1
  again

: copy-addr
  0 0

#####################
# Decompress some data to the decompression buffer
# Input: start of compressed data unpacked in v0 and v1
# Output: 60 uncompressed bytes in decompression-buffer
# Destroys: absolutely everything ðŸ˜‚

: decompress
  :alias num-bytes      vC
  :alias source-counter vD
  :alias target-counter vE
  source-counter := 0
	target-counter := 0
  i := decompression-source
  save v1

: decompress-loop
  i := decompress-loop-smc
  v2 := 0xA0
  v0 |= v2
  save v1
: decompress-loop-smc
  0 0
  # i points to start
  i += source-counter
  # i points to current run
	load v0
  vF := 0x7F
  num-bytes := v0
	num-bytes &= vF
  vF := 0x80
  vB := v0
  vB &= vF
  if vB == 0 then jump decompress-repeat
  # Fall through

# Do a plain load of the next `vC` bytes (constant time, thanks to `load vX`)

: decompress-load
  source-counter += num-bytes
  source-counter += 1
  v0 := num-bytes
  v0 -= 1
  v0 <<= v0
  v0 <<= v0
  jump0 decompress-load-bytes

: decompress-load-bytes
  load v0  jump decompress-next
  load v1  jump decompress-next
  load v2  jump decompress-next
  load v3  jump decompress-next
  load v4  jump decompress-next
  load v5  jump decompress-next
  load v6  jump decompress-next
  load v7  jump decompress-next
  load v8  jump decompress-next
  load v9  jump decompress-next
  load vA  jump decompress-next
  load vB  jump decompress-next

# Repeat the next byte `vC` times (time scales as `X + vC`)

: decompress-repeat
  source-counter += 2
  load v0
  v1 := v0
	v0 := 12
  v0 -= num-bytes
  v0 <<= v0
  vF := v1
  jump0 decompress-repeat-bytes

: decompress-repeat-bytes
  vB := vF  vA := vF  v9 := vF
  v8 := vF  v7 := vF  v6 := vF
  v5 := vF  v4 := vF  v3 := vF
  v2 := vF  v1 := vF  v0 := vF
  jump decompress-next

# Save `vC` bytes to the decompression buffer and add `vC` to the total number
# of decompressed bytes (constant time, thanks to `save vX`)

: decompress-next
  i := decompression-buffer
  i += target-counter
  target-counter += num-bytes
  vF := v0
  v0 := num-bytes
  vC := vF          # We don't need vC / num-bytes anymore
  v0 -= 1
  v0 <<= v0         # I want to do `v0 * 6` here, but I can't do it
  v0 <<= v0         # without messing up registers. So we do `v0 * 8`
  v0 <<= v0         # instead and lose a few bytes below :/
  jump0 decompress-save-bytes

: decompress-save-bytes
  v0 := vC  save v0  jump decompress-done  0 0
  v0 := vC  save v1  jump decompress-done  0 0
  v0 := vC  save v2  jump decompress-done  0 0
  v0 := vC  save v3  jump decompress-done  0 0
  v0 := vC  save v4  jump decompress-done  0 0
  v0 := vC  save v5  jump decompress-done  0 0
  v0 := vC  save v6  jump decompress-done  0 0
  v0 := vC  save v7  jump decompress-done  0 0
  v0 := vC  save v8  jump decompress-done  0 0
  v0 := vC  save v9  jump decompress-done  0 0
  v0 := vC  save vA  jump decompress-done  0 0
  v0 := vC  save vB  # Fall through

# If we have the desired number of bytes in the buffer, we're done
# Otherwise, re-unpack source pointer to v0 and v1 and restart

: decompress-done
  if target-counter == 60 then return
  i := decompression-source
  load v1
  jump decompress-loop


# Test data samples

: test1
  # Compression factor: 0%
  # 0xEE 0xEE 0x01 0x02 0x03 0xAA 0xAA 0xAA
  0x02 0xEE
  0x83 0x01 0x02 0x03
  0x06 0xAA

: test2
  # Compression factor: 75%
  # 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff
	0x08 0xff

: test3
  # Compression factor: 12,5%
  # 0x00 0x00 0x00 0x00 0x77 0x0A 0x00 0x80
	0x84 0x77 0x0A 0x00 0x80
	0x04 0x00

: test4
  # Compression factor: 25%
  # 0x40 0x0 0x80 0x0 0x0 0x0 0x0 0x0
  0x05 0x0
	0x83 0x40 0x0 0x80

: test5
  0x5 0x0 0x8a 0x6a 0x40 0x14 0xb4 0x20 0x20 0x2 0x68 0x40 0x40

: test6
  0x9 0x0 0x86 0x42 0x12 0xa0 0x0 0x68 0x40
